{"config":{"lang":["ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Robopy Documentation","text":"<p>Robopy\u306f\u3001\u30ed\u30dc\u30c3\u30c8\u5236\u5fa1\u306e\u305f\u3081\u306ePython interface\u3067\u3059\u3002rakuda \u3068 koch robot\u306b\u5bfe\u5fdc\u3057\u3001\u30ab\u30e1\u30e9\u3068\u89e6\u899a\u30bb\u30f3\u30b5\u30fc\u3092\u7d71\u5408\u3057\u305f\u30c7\u30fc\u30bf\u53ce\u96c6\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002</p>"},{"location":"#_1","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u69cb\u6210","text":"<ul> <li> <p> \u59cb\u3081\u65b9</p> <p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9</p> <p> \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb  \u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8</p> </li> <li> <p> \u30ed\u30dc\u30c3\u30c8</p> <p>\u5404\u30ed\u30dc\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u306e\u8a73\u7d30\u306a\u4f7f\u7528\u65b9\u6cd5</p> <p> Rakuda  Koch</p> </li> <li> <p> \u30bb\u30f3\u30b5\u30fc</p> <p>\u30bb\u30f3\u30b5\u30fc\u306e\u8a2d\u5b9a\u3068\u4f7f\u7528\u65b9\u6cd5</p> <p> \u30ab\u30e1\u30e9  \u30bf\u30af\u30bf\u30a4\u30eb</p> </li> <li> <p> \u5b9f\u9a13</p> <p>\u30c7\u30fc\u30bf\u53ce\u96c6\u306e\u5b9f\u884c\u65b9\u6cd5</p> <p> \u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc</p> </li> <li> <p> API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>\u8a73\u7d30\u306aAPI\u4ed5\u69d8</p> <p> \u30ed\u30dc\u30c3\u30c8  \u30bb\u30f3\u30b5\u30fc</p> </li> <li> <p> \u958b\u767a\u8005\u5411\u3051</p> <p>\u958b\u767a\u30ac\u30a4\u30c9\u3068\u8ca2\u732e\u65b9\u6cd5</p> <p> \u958b\u767a\u30ac\u30a4\u30c9</p> </li> </ul>"},{"location":"#_2","title":"\u30b5\u30dd\u30fc\u30c8","text":"<p>\u8cea\u554f\u3084\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u306f\u3001GitHub Issues\u3067\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"REALSENSE_CAMERA/","title":"RealSense Camera Implementation for Robopy","text":"<p>\u3053\u306e\u5b9f\u88c5\u306f\u3001Intel RealSense\u30ab\u30e1\u30e9\u3092robopy\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002LeRobot\u306e\u5b9f\u88c5\u3092\u30d9\u30fc\u30b9\u306b\u3001robopy\u306e\u65e2\u5b58\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5408\u308f\u305b\u3066\u7c21\u7d20\u5316\u3057\u3001threading\u306b\u3088\u308b\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u306a\u3044\u51e6\u7406\u3092\u91cd\u8996\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"REALSENSE_CAMERA/#_1","title":"\u4e3b\u306a\u7279\u5fb4","text":"<ul> <li>\u975e\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u51e6\u7406: \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30b9\u30ec\u30c3\u30c9\u3067\u7d99\u7d9a\u7684\u306b\u30d5\u30ec\u30fc\u30e0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3</li> <li>\u540c\u671f\u30fb\u975e\u540c\u671f\u8aad\u307f\u53d6\u308a: <code>get_observation()</code>\uff08\u540c\u671f\uff09\u3068<code>async_read()</code>\uff08\u975e\u540c\u671f\uff09\u306e\u4e21\u65b9\u3092\u30b5\u30dd\u30fc\u30c8</li> <li>\u6df1\u5ea6\u30c7\u30fc\u30bf\u5bfe\u5fdc: \u30ab\u30e9\u30fc\u30d5\u30ec\u30fc\u30e0\u3068\u6df1\u5ea6\u30d5\u30ec\u30fc\u30e0\u306e\u540c\u6642\u30ad\u30e3\u30d7\u30c1\u30e3</li> <li>robopy\u7d71\u5408: \u65e2\u5b58\u306eSensor\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u5b8c\u5168\u4e92\u63db</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u63a5\u7d9a\u30a8\u30e9\u30fc\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u9069\u5207\u306a\u51e6\u7406</li> </ul>"},{"location":"REALSENSE_CAMERA/#_2","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Linux\u74b0\u5883\u3067pyrealsense2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff1a</p> <pre><code># UV\u74b0\u5883\u306e\u5834\u5408\nuv add --group linux pyrealsense2\n\n# \u307e\u305f\u306f pip \u306e\u5834\u5408\npip install pyrealsense2\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"REALSENSE_CAMERA/#1","title":"1. \u30ab\u30e1\u30e9\u306e\u691c\u51fa","text":"<pre><code>from robopy.sensors.visual.realsense_camera import RealsenseCamera\nfrom robopy.config.visual_config.camera_config import RealsenseCameraConfig\n\n# \u5229\u7528\u53ef\u80fd\u306a\u30ab\u30e1\u30e9\u3092\u691c\u51fa\uff08find_realsense_cameras.py \u3092\u4f7f\u7528\uff09\n</code></pre>"},{"location":"REALSENSE_CAMERA/#2","title":"2. \u30ab\u30e1\u30e9\u306e\u521d\u671f\u5316\u3068\u63a5\u7d9a","text":"<pre><code># \u8a2d\u5b9a\u3092\u4f5c\u6210\nconfig = RealsenseCameraConfig(\n    fps=30,\n    width=640,\n    height=480,\n    color_mode=\"rgb\",  # \u307e\u305f\u306f \"bgr\"\n    is_depth_camera=True  # \u6df1\u5ea6\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u306a\u5834\u5408\n)\n\n# \u30ab\u30e1\u30e9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\ncamera = RealsenseCamera(index=0, name=\"main_camera\", config=config)\n\n# \u63a5\u7d9a\uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30b9\u30ec\u30c3\u30c9\u304c\u958b\u59cb\u3055\u308c\u308b\uff09\ncamera.connect()\n</code></pre>"},{"location":"REALSENSE_CAMERA/#3","title":"3. \u30d5\u30ec\u30fc\u30e0\u306e\u8aad\u307f\u53d6\u308a","text":""},{"location":"REALSENSE_CAMERA/#_4","title":"\u540c\u671f\u8aad\u307f\u53d6\u308a\uff08\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\uff09","text":"<pre><code># \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304c\u30d6\u30ed\u30c3\u30af\u3055\u308c\u308b\nframe = camera.get_observation(specific_color=\"rgb\")\nprint(f\"Frame shape: {frame.shape}\")  # (C, H, W) \u5f62\u5f0f\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_5","title":"\u975e\u540c\u671f\u8aad\u307f\u53d6\u308a\uff08\u975e\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\uff09","text":"<pre><code># \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306f\u30d6\u30ed\u30c3\u30af\u3055\u308c\u306a\u3044\nframe = camera.async_read(timeout_ms=200)\nprint(f\"Async frame shape: {frame.shape}\")  # (C, H, W) \u5f62\u5f0f\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_6","title":"\u6df1\u5ea6\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u53d6\u308a","text":"<pre><code># \u540c\u671f\ndepth = camera.read_depth(timeout_ms=1000)\n\n# \u975e\u540c\u671f\ndepth = camera.async_read_depth(timeout_ms=200)\nprint(f\"Depth shape: {depth.shape}\")  # (H, W) \u5f62\u5f0f\u3001uint16\uff08\u30df\u30ea\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\uff09\n</code></pre>"},{"location":"REALSENSE_CAMERA/#4","title":"4. \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<pre><code># \u5fc5\u305a\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\ncamera.disconnect()\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_7","title":"\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<p><code>RealsenseCameraConfig</code>\u3067\u5229\u7528\u53ef\u80fd\u306a\u8a2d\u5b9a\uff1a</p> <pre><code>config = RealsenseCameraConfig(\n    fps=30,                     # \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\n    width=640,                  # \u753b\u50cf\u5e45\n    height=480,                 # \u753b\u50cf\u9ad8\u3055\n    color_mode=\"rgb\",           # \u30ab\u30e9\u30fc\u30e2\u30fc\u30c9 (\"rgb\" \u307e\u305f\u306f \"bgr\")\n    is_depth_camera=True,       # \u6df1\u5ea6\u30c7\u30fc\u30bf\u3092\u6709\u52b9\u306b\u3059\u308b\n    auto_exposure=False,        # \u81ea\u52d5\u9732\u51fa\n    exposure=190.0,             # \u624b\u52d5\u9732\u51fa\u5024\n    auto_white_balance=False,   # \u81ea\u52d5\u30db\u30ef\u30a4\u30c8\u30d0\u30e9\u30f3\u30b9\n    white_balance=3300.0,       # \u624b\u52d5\u30db\u30ef\u30a4\u30c8\u30d0\u30e9\u30f3\u30b9\u5024\n    min_depth=100.0,           # \u6700\u5c0f\u6df1\u5ea6\uff08mm\uff09\n    max_depth=2000.0           # \u6700\u5927\u6df1\u5ea6\uff08mm\uff09\n)\n</code></pre>"},{"location":"REALSENSE_CAMERA/#threading","title":"Threading\u8a2d\u8a08","text":""},{"location":"REALSENSE_CAMERA/#_8","title":"\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30ad\u30e3\u30d7\u30c1\u30e3","text":"<ul> <li><code>connect()</code>\u6642\u306b\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30b9\u30ec\u30c3\u30c9\u304c\u958b\u59cb</li> <li>\u7d99\u7d9a\u7684\u306b\u30d5\u30ec\u30fc\u30e0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3001\u6700\u65b0\u30d5\u30ec\u30fc\u30e0\u3092\u4fdd\u6301</li> <li>\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u306a\u3044</li> </ul>"},{"location":"REALSENSE_CAMERA/#thread","title":"Thread\u5b89\u5168\u6027","text":"<ul> <li><code>Lock</code>\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\u306e\u7af6\u5408\u72b6\u614b\u3092\u9632\u6b62</li> <li><code>Event</code>\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u5230\u7740\u3092\u901a\u77e5</li> </ul>"},{"location":"REALSENSE_CAMERA/#_9","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"<ul> <li>\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406</li> <li>\u30ab\u30e1\u30e9\u5207\u65ad\u6642\u306e\u81ea\u52d5\u505c\u6b62</li> <li>\u4f8b\u5916\u306e\u9069\u5207\u306a\u30ed\u30b0\u51fa\u529b</li> </ul>"},{"location":"REALSENSE_CAMERA/#_10","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"REALSENSE_CAMERA/#_11","title":"\u30c7\u30e2\u5b9f\u884c","text":"<pre><code>python demo_realsense.py\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_12","title":"\u30c6\u30b9\u30c8\u5b9f\u884c","text":"<pre><code>python test_realsense.py\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_13","title":"\u30ab\u30e1\u30e9\u691c\u51fa","text":"<pre><code>python find_realsense_cameras.py\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_14","title":"\u5bfe\u5fdc\u30ab\u30e1\u30e9","text":"<p>Intel RealSense\u30b7\u30ea\u30fc\u30ba\uff1a - D435/D435i - D455 - D415 - L515 - \u305d\u306e\u4ed6\u306epyrealsense2\u5bfe\u5fdc\u30c7\u30d0\u30a4\u30b9</p>"},{"location":"REALSENSE_CAMERA/#_15","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9","text":"<ul> <li>\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30ad\u30e3\u30d7\u30c1\u30e3\u306b\u3088\u308a\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306e\u51e6\u7406\u304c\u4e2d\u65ad\u3055\u308c\u306a\u3044</li> <li><code>async_read()</code>\u306f\u901a\u5e38\u6570\u30df\u30ea\u79d2\u3067\u5b8c\u4e86</li> <li>100\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u6642\u9593\u3092\u30ed\u30b0\u51fa\u529b\uff08\u30c7\u30d0\u30c3\u30b0\u30ec\u30d9\u30eb\uff09</li> </ul>"},{"location":"REALSENSE_CAMERA/#_16","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"REALSENSE_CAMERA/#_17","title":"\u30ab\u30e1\u30e9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408","text":"<p><pre><code>python find_realsense_cameras.py\n</code></pre> \u3067\u30c7\u30d0\u30a4\u30b9\u3092\u78ba\u8a8d</p>"},{"location":"REALSENSE_CAMERA/#_18","title":"\u6a29\u9650\u30a8\u30e9\u30fc","text":"<pre><code># udev\u30eb\u30fc\u30eb\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\nsudo apt install librealsense2-utils\n</code></pre>"},{"location":"REALSENSE_CAMERA/#_19","title":"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30a8\u30e9\u30fc","text":"<ul> <li>USB\u30b1\u30fc\u30d6\u30eb\u306e\u78ba\u8a8d</li> <li>USB 3.0\u30dd\u30fc\u30c8\u306e\u4f7f\u7528</li> <li>\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u30ab\u30e1\u30e9\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d</li> </ul>"},{"location":"REALSENSE_CAMERA/#_20","title":"\u5b9f\u88c5\u8a73\u7d30","text":""},{"location":"REALSENSE_CAMERA/#lerobot","title":"LeRobot\u3068\u306e\u9055\u3044","text":"<ul> <li>robopy\u306eSensor\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u6e96\u62e0</li> <li>\u8a2d\u5b9a\u30b7\u30b9\u30c6\u30e0\u306e\u7d71\u5408</li> <li>CHW\u5f62\u5f0f\u3067\u306e\u753b\u50cf\u51fa\u529b</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u7c21\u7d20\u5316</li> </ul>"},{"location":"REALSENSE_CAMERA/#_21","title":"\u6700\u9069\u5316\u30dd\u30a4\u30f3\u30c8","text":"<ul> <li>\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u306a\u3057\uff08\u6700\u65b0\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u4fdd\u6301\uff09</li> <li>\u52b9\u7387\u7684\u306a\u30ab\u30e9\u30fc\u5909\u63db</li> <li>\u6700\u5c0f\u9650\u306e\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#020-2025-01-xx","title":"[0.2.0] - 2025-01-XX","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Robopy\u306e\u521d\u671f\u30ea\u30ea\u30fc\u30b9</li> <li>Rakuda\u30ed\u30dc\u30c3\u30c8\u5bfe\u5fdc</li> <li>Koch\u30ed\u30dc\u30c3\u30c8\u5bfe\u5fdc\uff08\u958b\u767a\u4e2d\uff09</li> <li>Intel RealSense\u30ab\u30e1\u30e9\u30b5\u30dd\u30fc\u30c8</li> <li>DIGIT\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u30b5\u30dd\u30fc\u30c8</li> <li>H5\u5f62\u5f0f\u30c7\u30fc\u30bf\u4fdd\u5b58\u6a5f\u80fd</li> <li>\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u6a5f\u80fd</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>\u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd</li> <li>\u4e26\u5217\u30c7\u30fc\u30bf\u8a18\u9332</li> <li>\u30de\u30eb\u30c1\u30bb\u30f3\u30b5\u30fc\u7d71\u5408</li> </ul>"},{"location":"changelog/#010-2024-xx-xx","title":"[0.1.0] - 2024-XX-XX","text":""},{"location":"changelog/#initial-release","title":"Initial Release","text":"<ul> <li>\u57fa\u672c\u7684\u306a\u30ed\u30dc\u30c3\u30c8\u5236\u5fa1\u6a5f\u80fd</li> </ul>"},{"location":"api/config/","title":"\u8a2d\u5b9aAPI","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u8a2d\u5b9a\u306b\u95a2\u9023\u3059\u308bAPI\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"api/config/#_1","title":"\u30ed\u30dc\u30c3\u30c8\u8a2d\u5b9a","text":""},{"location":"api/config/#rakudaconfig","title":"RakudaConfig","text":""},{"location":"api/config/#robopy.config.robot_config.rakuda_config.RakudaConfig","title":"RakudaConfig  <code>dataclass</code>","text":"<pre><code>RakudaConfig(leader_port: str, follower_port: str, sensors: RakudaSensorParams | None = None, slow_mode: bool = False)\n</code></pre> <p>Configuration class for Rakuda robot.</p>"},{"location":"api/config/#kochconfig","title":"KochConfig","text":""},{"location":"api/config/#robopy.config.robot_config.koch_config.KochConfig","title":"KochConfig  <code>dataclass</code>","text":"<pre><code>KochConfig(leader_port: str, follower_port: str, calibration_path: str, sensors: KochSensorConfig = KochSensorConfig())\n</code></pre> <p>Configuration class for Koch robot.</p> ATTRIBUTE DESCRIPTION <code>camera</code> <p>Backward compatibility property for camera access.</p> <p> TYPE: <code>Dict[str, RealsenseCameraConfig | WebCameraConfig]</code> </p>"},{"location":"api/config/#robopy.config.robot_config.koch_config.KochConfig.camera","title":"camera  <code>property</code> <code>writable</code>","text":"<pre><code>camera: Dict[str, RealsenseCameraConfig | WebCameraConfig]\n</code></pre> <p>Backward compatibility property for camera access.</p>"},{"location":"api/config/#rakudasensorparams","title":"RakudaSensorParams","text":""},{"location":"api/config/#robopy.config.robot_config.rakuda_config.RakudaSensorParams","title":"RakudaSensorParams  <code>dataclass</code>","text":"<pre><code>RakudaSensorParams(cameras: List[CameraParams] = list(), tactile: List[TactileParams] = list())\n</code></pre>"},{"location":"api/config/#_2","title":"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a","text":""},{"location":"api/config/#cameraparams","title":"CameraParams","text":""},{"location":"api/config/#robopy.config.sensor_config.CameraParams","title":"CameraParams  <code>dataclass</code>","text":"<pre><code>CameraParams(name: str, width: int, height: int, fps: int)\n</code></pre>"},{"location":"api/config/#tactileparams","title":"TactileParams","text":""},{"location":"api/config/#robopy.config.sensor_config.TactileParams","title":"TactileParams  <code>dataclass</code>","text":"<pre><code>TactileParams(serial_num: str, name: str = 'main', fps: int | None = 30)\n</code></pre>"},{"location":"api/config/#_3","title":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8a2d\u5b9a","text":""},{"location":"api/config/#realsensecameraconfig","title":"RealsenseCameraConfig","text":""},{"location":"api/config/#robopy.config.sensor_config.visual_config.RealsenseCameraConfig","title":"RealsenseCameraConfig  <code>dataclass</code>","text":"<pre><code>RealsenseCameraConfig(fps: int | float | None = 30, width: int | float | None = None, height: int | float | None = None, color_mode: Literal['rgb', 'bgr'] = 'rgb', auto_exposure: bool = False, exposure: float | None = 190.0, auto_white_balance: bool = False, white_balance: float | None = 3300.0, serial_no: str | None = None, name: str = 'main', index: int = 0, warmup_s: float = 1.0, is_depth_camera: bool = True, is_realsense: bool = True, min_depth: float = 100.0, max_depth: float = 2000.0)\n</code></pre> <p>               Bases: <code>CameraConfig</code></p> <p>Configuration class for RealSense cameras.</p>"},{"location":"api/config/#webcameraconfig","title":"WebCameraConfig","text":""},{"location":"api/config/#robopy.config.sensor_config.visual_config.WebCameraConfig","title":"WebCameraConfig  <code>dataclass</code>","text":"<pre><code>WebCameraConfig(fps: int | float | None = None, width: int | float | None = None, height: int | float | None = None, color_mode: Literal['rgb', 'bgr'] = 'rgb', auto_exposure: bool = False, exposure: float | None = 190.0, auto_white_balance: bool = False, white_balance: float | None = 3300.0, serial_no: str | None = None, is_depth_camera: bool = False, is_realsense: bool = False)\n</code></pre> <p>               Bases: <code>CameraConfig</code></p> <p>Configuration class for web cameras using OpenCV.</p>"},{"location":"api/config/#_4","title":"\u30c7\u30fc\u30bf\u578b","text":""},{"location":"api/config/#rakudaobs","title":"RakudaObs","text":""},{"location":"api/config/#robopy.config.robot_config.rakuda_config.RakudaObs","title":"RakudaObs  <code>dataclass</code>","text":"<pre><code>RakudaObs(arms: RakudaArmObs, sensors: RakudaSensorObs | None)\n</code></pre> <p>Overall observation structure for Rakuda robot. arms: Observations from the robot arms (leader and follower). sensors: Observations from the sensors (cameras and tactile).</p>"},{"location":"api/config/#kochobservation","title":"KochObservation","text":""},{"location":"api/config/#robopy.config.robot_config.koch_config.KochObservation","title":"KochObservation  <code>dataclass</code>","text":"<pre><code>KochObservation(leader: ArrayLike, follower: ArrayLike, sensors: KochSensorRetuns)\n</code></pre> <p>Observation class for Koch robot.</p>"},{"location":"api/config/#_5","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"api/config/#rakuda","title":"\u57fa\u672c\u7684\u306aRakuda\u8a2d\u5b9a","text":"<pre><code>from robopy import RakudaConfig\n\n# \u6700\u5c0f\u9650\u306e\u8a2d\u5b9a\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\"\n)\n\nprint(f\"Leader \u30dd\u30fc\u30c8: {config.leader_port}\")\nprint(f\"Follower \u30dd\u30fc\u30c8: {config.follower_port}\")\nprint(f\"\u30b9\u30ed\u30fc\u30e2\u30fc\u30c9: {config.slow_mode}\")\n</code></pre>"},{"location":"api/config/#_6","title":"\u30bb\u30f3\u30b5\u30fc\u4ed8\u304d\u306e\u8a2d\u5b9a","text":"<pre><code>from robopy import RakudaConfig, RakudaSensorParams, TactileParams\nfrom robopy.config.sensor_config import CameraParams\nfrom robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u5b8c\u5168\u306a\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=RakudaSensorParams(\n        cameras=[\n            CameraParams(\n                name=\"main\",\n                config=RealsenseCameraConfig(\n                    fps=30,\n                    width=640,\n                    height=480,\n                    color_mode=\"rgb\",\n                    depth_mode=\"z16\"\n                )\n            ),\n            CameraParams(\n                name=\"side\",\n                config=RealsenseCameraConfig(\n                    fps=15,\n                    width=424,\n                    height=240,\n                    color_mode=\"rgb\"\n                )\n            )\n        ],\n        tactile=[\n            TactileParams(serial_num=\"D20542\", name=\"left\"),\n            TactileParams(serial_num=\"D20537\", name=\"right\"),\n        ]\n    ),\n    slow_mode=False\n)\n</code></pre>"},{"location":"api/config/#koch","title":"Koch\u8a2d\u5b9a","text":"<pre><code>from robopy.config.robot_config.koch_config import KochConfig\n\n# Koch \u30ed\u30dc\u30c3\u30c8\u306e\u8a2d\u5b9a\nconfig = KochConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    camera_config=None  # \u30ab\u30e1\u30e9\u306a\u3057\n)\n</code></pre>"},{"location":"api/config/#_7","title":"\u30ab\u30e1\u30e9\u8a2d\u5b9a\u306e\u8a73\u7d30","text":"<pre><code>from robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u9ad8\u89e3\u50cf\u5ea6\u8a2d\u5b9a\nhigh_res_config = RealsenseCameraConfig(\n    fps=15,\n    width=1280,\n    height=720,\n    color_mode=\"rgb\",\n    depth_mode=\"z16\",\n    enable_depth=True\n)\n\n# \u9ad8\u901f\u8a2d\u5b9a\nfast_config = RealsenseCameraConfig(\n    fps=60,\n    width=424,\n    height=240,\n    color_mode=\"rgb\",\n    enable_depth=False\n)\n\n# Web\u30ab\u30e1\u30e9\u8a2d\u5b9a\nfrom robopy.config.sensor_config.visual_config import WebCameraConfig\n\nwebcam_config = WebCameraConfig(\n    device_id=0,\n    fps=30,\n    width=640,\n    height=480\n)\n</code></pre>"},{"location":"api/config/#_8","title":"\u8a2d\u5b9a\u306e\u691c\u8a3c","text":"<pre><code># \u8a2d\u5b9a\u5024\u306e\u78ba\u8a8d\nif config.sensors:\n    if config.sensors.cameras:\n        print(f\"\u30ab\u30e1\u30e9\u6570: {len(config.sensors.cameras)}\")\n        for cam in config.sensors.cameras:\n            print(f\"  {cam.name}: {cam.config}\")\n\n    if config.sensors.tactile:\n        print(f\"\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u6570: {len(config.sensors.tactile)}\")\n        for tactile in config.sensors.tactile:\n            print(f\"  {tactile.name}: {tactile.serial_num}\")\n</code></pre>"},{"location":"api/config/#_9","title":"\u8a2d\u5b9a\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f","text":"<pre><code>import json\nfrom pathlib import Path\n\n# \u8a2d\u5b9a\u306e\u4fdd\u5b58\uff08JSON\u5f62\u5f0f\uff09\nconfig_dict = {\n    \"leader_port\": config.leader_port,\n    \"follower_port\": config.follower_port,\n    \"slow_mode\": config.slow_mode,\n}\n\nif config.sensors:\n    if config.sensors.cameras:\n        config_dict[\"cameras\"] = [\n            {\n                \"name\": cam.name,\n                \"fps\": cam.config.fps,\n                \"width\": cam.config.width,\n                \"height\": cam.config.height,\n            }\n            for cam in config.sensors.cameras\n        ]\n\n    if config.sensors.tactile:\n        config_dict[\"tactile\"] = [\n            {\n                \"name\": tactile.name,\n                \"serial_num\": tactile.serial_num,\n            }\n            for tactile in config.sensors.tactile\n        ]\n\n# \u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\nconfig_path = Path(\"robot_config.json\")\nwith open(config_path, \"w\") as f:\n    json.dump(config_dict, f, indent=2)\n\nprint(f\"\u8a2d\u5b9a\u3092 {config_path} \u306b\u4fdd\u5b58\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"api/config/#_10","title":"\u74b0\u5883\u5909\u6570\u306b\u3088\u308b\u8a2d\u5b9a","text":"<pre><code>import os\nfrom robopy import RakudaConfig\n\n# \u74b0\u5883\u5909\u6570\u304b\u3089\u8a2d\u5b9a\u5024\u3092\u53d6\u5f97\nconfig = RakudaConfig(\n    leader_port=os.getenv(\"RAKUDA_LEADER_PORT\", \"/dev/ttyUSB0\"),\n    follower_port=os.getenv(\"RAKUDA_FOLLOWER_PORT\", \"/dev/ttyUSB1\"),\n    slow_mode=os.getenv(\"RAKUDA_SLOW_MODE\", \"false\").lower() == \"true\"\n)\n</code></pre>"},{"location":"api/robots/","title":"\u30ed\u30dc\u30c3\u30c8API","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u30ed\u30dc\u30c3\u30c8\u5236\u5fa1\u306b\u95a2\u9023\u3059\u308bAPI\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"api/robots/#rakudarobot","title":"RakudaRobot","text":""},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot","title":"RakudaRobot","text":"<pre><code>RakudaRobot(cfg: RakudaConfig)\n</code></pre> <p>               Bases: <code>ComposedRobot</code></p> METHOD DESCRIPTION <code>connect</code> <code>disconnect</code> <code>teleoperation</code> <p>Start teleoperation for Rakuda robot.</p> <code>record</code> <code>record_parallel</code> <p>teleoperate_step\u3092teleop_hz\u3067\u56de\u3057\u3064\u3064\u3001fps\u3054\u3068\u306b\u6700\u65b0\u306earm_obs\u3092\u8a18\u9332\u3057\u3001</p> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>def __init__(self, cfg: RakudaConfig):\n    self.config = cfg\n    self._pair_sys = RakudaPairSys(cfg)\n    self._sensor_configs: RakudaSensorConfigs = self._init_config()\n    self._sensors: Sensors = self._init_sensors()\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>@override\ndef connect(self) -&gt; None:\n    try:\n        self._pair_sys.connect()\n    except Exception as e:\n        self._pair_sys.disconnect()\n        raise e\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>@override\ndef disconnect(self) -&gt; None:\n    self._pair_sys.disconnect()\n\n    for cam in self._sensors.cameras or []:\n        cam.disconnect()\n\n    for tac in self._sensors.tactile or []:\n        tac.disconnect()\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot.teleoperation","title":"teleoperation","text":"<pre><code>teleoperation(max_seconds: float | None = None) -&gt; None\n</code></pre> <p>Start teleoperation for Rakuda robot.</p> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>@override\ndef teleoperation(self, max_seconds: float | None = None) -&gt; None:\n    \"\"\"Start teleoperation for Rakuda robot.\"\"\"\n    if not self.is_connected:\n        raise ConnectionError(\"RakudaRobot is not connected. Call connect() first.\")\n\n    if max_seconds is not None and max_seconds &gt; 0:\n        self._pair_sys.teleoperate(max_seconds=max_seconds)\n    else:\n        self._pair_sys.teleoperate()\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot.record","title":"record","text":"<pre><code>record(max_frame: int, fps: int = 5) -&gt; RakudaObs\n</code></pre> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>def record(self, max_frame: int, fps: int = 5) -&gt; RakudaObs:\n    if not self.is_connected:\n        self.connect()\n\n    if max_frame &lt;= 0:\n        raise ValueError(\"max_frame must be greater than 0.\")\n\n    leader_obs = []\n    follower_obs = []\n    camera_obs: Dict[str, List] = DefaultDict(list)\n    tactile_obs: Dict[str, List] = DefaultDict(list)\n\n    get_obs_interval = 1.0 / fps\n    frame_count = 0\n    interval_start = time.time()\n\n    try:\n        while frame_count &lt; max_frame:\n            temp_arm_obs = self.robot_system.teleoperate_step()\n\n            if time.time() - interval_start &lt; get_obs_interval:\n                continue\n\n            arm_obs = temp_arm_obs\n            leader_obs.append(arm_obs.leader)\n            follower_obs.append(arm_obs.follower)\n\n            sensor_data = self.sensors_observation()\n            camera_data = sensor_data.cameras\n            tactile_data = sensor_data.tactile\n\n            for cam_name, cam_frame in camera_data.items():\n                camera_obs[cam_name].append(cam_frame)\n\n            for tac_name, tac_frame in tactile_data.items():\n                tactile_obs[tac_name].append(tac_frame)\n\n            frame_count += 1\n            interval_start = time.time()\n\n    except KeyboardInterrupt:\n        logger.info(\"Recording interrupted by user.\")\n    except Exception as e:\n        logger.error(f\"An error occurred during recording: {e}\")\n        raise e\n\n    # proccess observations to numpy arrays\n    leader_obs_np = np.array(leader_obs)\n    follower_obs_np = np.array(follower_obs)\n    arms: RakudaArmObs = RakudaArmObs(leader=leader_obs_np, follower=follower_obs_np)\n    # process camera observations\n    camera_obs_np: Dict[str, NDArray[np.float32] | None] = {}\n    for cam_name, frames in camera_obs.items():\n        if frames:\n            camera_obs_np[cam_name] = np.array(frames)\n        else:\n            camera_obs_np[cam_name] = None\n\n    # process tactile observations\n    tactile_obs_np: Dict[str, NDArray[np.float32] | None] = {}\n    for tac_name, frames in tactile_obs.items():\n        if frames:\n            tactile_obs_np[tac_name] = np.array(frames)\n        else:\n            tactile_obs_np[tac_name] = None\n\n    sensors_obs = RakudaSensorObs(cameras=camera_obs_np, tactile=tactile_obs_np)\n    return RakudaObs(arms=arms, sensors=sensors_obs)\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_robot.RakudaRobot.record_parallel","title":"record_parallel","text":"<pre><code>record_parallel(max_frame: int, fps: int = 20, teleop_hz: int = 25, max_processing_time_ms: float = 40) -&gt; RakudaObs\n</code></pre> <p>teleoperate_step\u3092teleop_hz\u3067\u56de\u3057\u3064\u3064\u3001fps\u3054\u3068\u306b\u6700\u65b0\u306earm_obs\u3092\u8a18\u9332\u3057\u3001 \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306f\u4e26\u5217\u53d6\u5f97\u3059\u308b\u9ad8\u901f\u8a18\u9332\u3002</p> Source code in <code>src/robopy/robots/rakuda/rakuda_robot.py</code> <pre><code>def record_parallel(\n    self,\n    max_frame: int,\n    fps: int = 20,\n    teleop_hz: int = 25,\n    max_processing_time_ms: float = 40,\n) -&gt; RakudaObs:\n    \"\"\"\n    teleoperate_step\u3092teleop_hz\u3067\u56de\u3057\u3064\u3064\u3001fps\u3054\u3068\u306b\u6700\u65b0\u306earm_obs\u3092\u8a18\u9332\u3057\u3001\n    \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306f\u4e26\u5217\u53d6\u5f97\u3059\u308b\u9ad8\u901f\u8a18\u9332\u3002\n    \"\"\"\n    if not self.is_connected:\n        self.connect()\n\n    if max_frame &lt;= 0:\n        raise ValueError(\"max_frame must be greater than 0.\")\n\n    # arm_obs\u3092\u9ad8\u983b\u5ea6\u3067\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30ad\u30e5\u30fc\n    arm_obs_queue: queue.Queue[RakudaArmObs] = queue.Queue(maxsize=teleop_hz * 2)\n    stop_event = threading.Event()\n\n    def teleop_worker():\n        interval = 1.0 / teleop_hz\n        while not stop_event.is_set():\n            start_time = time.perf_counter()\n            obs = self.robot_system.teleoperate_step()\n\n            try:\n                arm_obs_queue.put(obs, timeout=interval)\n            except queue.Full:\n                pass\n            elapsed = time.perf_counter() - start_time\n            sleep_time = max(0, interval - elapsed)\n            time.sleep(sleep_time)\n\n    teleop_thread = threading.Thread(target=teleop_worker, daemon=True)\n    teleop_thread.start()\n\n    leader_obs = []\n    follower_obs = []\n    camera_obs: Dict[str, List] = DefaultDict(list)\n    tactile_obs: Dict[str, List] = DefaultDict(list)\n\n    get_obs_interval = 1.0 / fps\n    max_processing_time = max_processing_time_ms / 1000.0\n    frame_count = 0\n    skipped_frames = 0\n    total_processing_time = 0.0\n\n    logger.info(f\"Starting parallel recording: {max_frame} frames at {fps}Hz\")\n    logger.info(\n        f\"\"\"Target interval: {get_obs_interval * 1000:.1f}ms, \n        Max processing time: {max_processing_time_ms}ms\"\"\"\n    )\n\n    try:\n        while frame_count &lt; max_frame:\n            frame_start_time = time.perf_counter()\n\n            # \u6700\u65b0\u306earm_obs\u3092\u53d6\u5f97\uff08\u30d0\u30c3\u30d5\u30a1\u304c\u7a7a\u306a\u3089\u5f85\u3064\uff09\n            try:\n                while True:\n                    arm_obs = arm_obs_queue.get(timeout=get_obs_interval)\n                    while not arm_obs_queue.empty():\n                        arm_obs = arm_obs_queue.get_nowait()\n                    break\n            except queue.Empty:\n                logger.warning(\"No arm_obs available in time.\")\n                continue\n\n            # \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306f\u4e26\u5217\u53d6\u5f97\n            try:\n                with ThreadPoolExecutor(max_workers=4) as executor:\n                    # Camera futures\n                    camera_futures = {}\n                    if self._sensors.cameras:\n                        for cam in self._sensors.cameras:\n                            if cam.is_connected:\n                                camera_futures[cam.name] = executor.submit(\n                                    cam.async_read, timeout_ms=5\n                                )\n\n                    # Tactile futures\n                    tactile_futures = {}\n                    if self._sensors.tactile:\n                        for tac in self._sensors.tactile:\n                            if tac.is_connected:\n                                tactile_futures[tac.name] = executor.submit(\n                                    tac.async_read, timeout_ms=5\n                                )\n\n                    timeout = max_processing_time * 0.5\n\n                    camera_data: Dict[str, NDArray | None] = {}\n                    for cam_name, future in camera_futures.items():\n                        try:\n                            camera_data[cam_name] = future.result(timeout=timeout / 2)\n                        except Exception as e:\n                            logger.warning(\n                                f\"Camera {cam_name} failed in frame {frame_count}: {e}\"\n                            )\n                            camera_data[cam_name] = None\n\n                    tactile_data: Dict[str, NDArray | None] = {}\n                    for tac_name, future in tactile_futures.items():\n                        try:\n                            tactile_data[tac_name] = future.result(timeout=timeout / 2)\n                        except Exception as e:\n                            logger.warning(\n                                f\"Tactile {tac_name} failed in frame {frame_count}: {e}\"\n                            )\n                            tactile_data[tac_name] = None\n\n                # \u8a18\u9332\n                leader_obs.append(arm_obs.leader)\n                follower_obs.append(arm_obs.follower)\n\n                for cam_name, cam_frame in camera_data.items():\n                    camera_obs[cam_name].append(cam_frame)\n\n                for tac_name, tac_frame in tactile_data.items():\n                    tactile_obs[tac_name].append(tac_frame)\n\n                frame_count += 1\n\n                # \u30bf\u30a4\u30df\u30f3\u30b0\u8abf\u6574\n                processing_time = time.perf_counter() - frame_start_time\n                total_processing_time += processing_time\n\n                if processing_time &gt; max_processing_time:\n                    skipped_frames += 1\n                    logger.warning(\n                        f\"\"\"Frame {frame_count} took {processing_time * 1000:.1f}ms \n                        (&gt;{max_processing_time_ms}ms), skipping\"\"\"\n                    )\n                    continue\n\n                elapsed = time.perf_counter() - frame_start_time\n                sleep_time = max(0, get_obs_interval - elapsed)\n                if sleep_time &gt; 0:\n                    time.sleep(sleep_time)\n\n            except Exception as e:\n                logger.error(f\"Unexpected error in frame {frame_count}: {e}\")\n                continue\n\n    except KeyboardInterrupt:\n        logger.info(\"Recording interrupted by user.\")\n    except Exception as e:\n        logger.error(f\"An error occurred during parallel recording: {e}\")\n        raise e\n    finally:\n        stop_event.set()\n        teleop_thread.join(timeout=1.0)\n\n    avg_processing_time = total_processing_time / max(1, frame_count) * 1000\n    logger.info(f\"Recording completed: {frame_count} frames, {skipped_frames} skipped\")\n    logger.info(f\"Average processing time: {avg_processing_time:.1f}ms\")\n\n    leader_obs_np = np.array(leader_obs)\n    follower_obs_np = np.array(follower_obs)\n    arms: RakudaArmObs = RakudaArmObs(leader=leader_obs_np, follower=follower_obs_np)\n\n    camera_obs_np: Dict[str, NDArray[np.float32] | None] = {}\n    for cam_name, frames in camera_obs.items():\n        if frames and all(frame is not None for frame in frames):\n            camera_obs_np[cam_name] = np.array(frames)\n        else:\n            camera_obs_np[cam_name] = None\n\n    tactile_obs_np: Dict[str, NDArray[np.float32] | None] = {}\n    for tac_name, frames in tactile_obs.items():\n        if frames and all(frame is not None for frame in frames):\n            tactile_obs_np[tac_name] = np.array(frames).transpose(0, 3, 1, 2)\n        else:\n            tactile_obs_np[tac_name] = None\n    sensors_obs = RakudaSensorObs(cameras=camera_obs_np, tactile=tactile_obs_np)\n    return RakudaObs(arms=arms, sensors=sensors_obs)\n</code></pre>"},{"location":"api/robots/#robopy.config.robot_config.rakuda_config.RakudaConfig","title":"RakudaConfig  <code>dataclass</code>","text":"<pre><code>RakudaConfig(leader_port: str, follower_port: str, sensors: RakudaSensorParams | None = None, slow_mode: bool = False)\n</code></pre> <p>Configuration class for Rakuda robot.</p>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_pair_sys.RakudaPairSys","title":"RakudaPairSys","text":"<pre><code>RakudaPairSys(cfg: RakudaConfig)\n</code></pre> <p>               Bases: <code>Robot</code></p> <p>Class representing the Rakuda robotic system with both leader and follower arms.</p> METHOD DESCRIPTION <code>connect</code> <p>Connect to both leader and follower arms.</p> <code>disconnect</code> <p>Disconnect from both leader and follower arms.</p> <code>get_observation</code> <p>Get the current observation from both arms.</p> Source code in <code>src/robopy/robots/rakuda/rakuda_pair_sys.py</code> <pre><code>def __init__(self, cfg: RakudaConfig):\n    self.config = cfg\n    self._leader = RakudaLeader(cfg)\n    self._follower = RakudaFollower(cfg)\n    self._is_connected = False\n    self._motor_mapping = (\n        RAKUDA_MOTOR_MAPPING  # key: leader motor name, value: follower motor name\n    )\n    self._leader_motor_names = list(self._leader.motors.motors.keys())\n    self._follower_motor_names = list(self._follower.motors.motors.keys())\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_pair_sys.RakudaPairSys.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre> <p>Connect to both leader and follower arms.</p> Source code in <code>src/robopy/robots/rakuda/rakuda_pair_sys.py</code> <pre><code>def connect(self) -&gt; None:\n    \"\"\"Connect to both leader and follower arms.\"\"\"\n    if self.is_connected:\n        logger.info(\"Successfully connected to both leader and follower arms.\")\n        return\n\n    try:\n        self._leader.connect()\n        self._follower.connect()\n        logger.info(\"Successfully connected to both leader and follower arms.\")\n        print(\"[cyan]Successfully connected to both leader and follower arms.[/cyan]\")\n        self._is_connected = True\n    except (OSError, IOError, PermissionError) as e:\n        logger.error(f\"Failed to connect to arms: {e}\")\n        raise ConnectionError(f\"Failed to connect to arms: {e}\")\n    except (pickle.PickleError, EOFError) as e:\n        logger.error(f\"Calibration data corrupted: {e}\")\n        raise ConnectionError(f\"Calibration data error: {e}\")\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_pair_sys.RakudaPairSys.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from both leader and follower arms.</p> Source code in <code>src/robopy/robots/rakuda/rakuda_pair_sys.py</code> <pre><code>def disconnect(self) -&gt; None:\n    \"\"\"Disconnect from both leader and follower arms.\"\"\"\n    self.leader.disconnect()\n    self.follower.disconnect()\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_pair_sys.RakudaPairSys.get_observation","title":"get_observation","text":"<pre><code>get_observation() -&gt; RakudaArmObs\n</code></pre> <p>Get the current observation from both arms.</p> Source code in <code>src/robopy/robots/rakuda/rakuda_pair_sys.py</code> <pre><code>def get_observation(self) -&gt; RakudaArmObs:\n    \"\"\"Get the current observation from both arms.\"\"\"\n    if not self.is_connected:\n        raise ConnectionError(\"RakudaPairSys is not connected. Call connect() first.\")\n\n    leader_motor_names = self._leader_motor_names\n    follower_motor_names = self._follower_motor_names\n    leader_obs = self._leader.motors.sync_read(\n        XControlTable.PRESENT_POSITION, leader_motor_names\n    )\n\n    follower_obs = self._follower.motors.sync_read(\n        XControlTable.PRESENT_POSITION, follower_motor_names\n    )\n\n    leader_obs_array = np.array(list(leader_obs.values()), dtype=np.float32)\n    follower_obs_array = np.array(list(follower_obs.values()), dtype=np.float32)\n    return RakudaArmObs(leader=leader_obs_array, follower=follower_obs_array)\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_leader.RakudaLeader","title":"RakudaLeader","text":"<pre><code>RakudaLeader(cfg: RakudaConfig)\n</code></pre> <p>               Bases: <code>RakudaArm</code></p> <p>Class representing the leader arm of the Rakuda robotic system.</p> METHOD DESCRIPTION <code>connect</code> <code>disconnect</code>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_leader.RakudaLeader.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_leader.RakudaLeader.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_follower.RakudaFollower","title":"RakudaFollower","text":"<pre><code>RakudaFollower(cfg: RakudaConfig)\n</code></pre> <p>               Bases: <code>RakudaArm</code></p> <p>Class representing the follower arm of the Rakuda robotic system.</p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the follower arm and enable torque.</p> <code>disconnect</code> <p>Disconnect from the follower arm and disable torque.</p>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_follower.RakudaFollower.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre> <p>Connect to the follower arm and enable torque.</p>"},{"location":"api/robots/#robopy.robots.rakuda.rakuda_follower.RakudaFollower.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from the follower arm and disable torque.</p>"},{"location":"api/robots/#robopy.robots.koch.koch_robot.KochRobot","title":"KochRobot","text":"<pre><code>KochRobot(cfg: KochConfig)\n</code></pre> <p>               Bases: <code>ComposedRobot</code></p> METHOD DESCRIPTION <code>connect</code> <code>disconnect</code> <code>teleoperation</code> <p>Start teleoperation mode where leader controls follower.</p>"},{"location":"api/robots/#robopy.robots.koch.koch_robot.KochRobot.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre>"},{"location":"api/robots/#robopy.robots.koch.koch_robot.KochRobot.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre>"},{"location":"api/robots/#robopy.robots.koch.koch_robot.KochRobot.teleoperation","title":"teleoperation","text":"<pre><code>teleoperation(max_seconds: float) -&gt; None\n</code></pre> <p>Start teleoperation mode where leader controls follower.</p>"},{"location":"api/robots/#_1","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"api/robots/#rakudarobot_1","title":"\u57fa\u672c\u7684\u306aRakudaRobot\u306e\u4f7f\u7528","text":"<pre><code>from robopy import RakudaConfig, RakudaRobot\n\n# \u8a2d\u5b9a\u306e\u4f5c\u6210\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\"\n)\n\n# \u30ed\u30dc\u30c3\u30c8\u306e\u4f5c\u6210\u3068\u63a5\u7d9a\nrobot = RakudaRobot(config)\nrobot.connect()\n\ntry:\n    # \u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\n    robot.teleoperation(duration=10)\n\n    # \u30c7\u30fc\u30bf\u8a18\u9332\n    obs = robot.record_parallel(max_frame=1000,20)\n\nfinally:\n    robot.disconnect()\n</code></pre>"},{"location":"api/robots/#_2","title":"\u500b\u5225\u30a2\u30fc\u30e0\u306e\u5236\u5fa1","text":"<pre><code>from robopy.robots.rakuda import RakudaLeader, RakudaFollower\n\n# \u500b\u5225\u30a2\u30fc\u30e0\u306e\u4f5c\u6210\nleader = RakudaLeader(\"/dev/ttyUSB0\")\nfollower = RakudaFollower(\"/dev/ttyUSB1\")\n\nleader.connect()\nfollower.connect()\n\ntry:\n    # Leader\u304b\u3089\u89b3\u6e2c\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    leader_obs = leader.get_obs()\n\n    # Follower\u306b\u52d5\u4f5c\u6307\u4ee4\u3092\u9001\u4fe1\n    follower.set_action(leader_obs[\"action\"])\n\nfinally:\n    leader.disconnect()\n    follower.disconnect()\n</code></pre>"},{"location":"api/sensors/","title":"\u30bb\u30f3\u30b5\u30fcAPI","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u30bb\u30f3\u30b5\u30fc\u5236\u5fa1\u306b\u95a2\u9023\u3059\u308bAPI\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"api/sensors/#_1","title":"\u30ab\u30e1\u30e9","text":""},{"location":"api/sensors/#realsensecamera","title":"RealsenseCamera","text":""},{"location":"api/sensors/#robopy.sensors.visual.realsense_camera.RealsenseCamera","title":"RealsenseCamera","text":"<pre><code>RealsenseCamera(config: RealsenseCameraConfig)\n</code></pre> <p>               Bases: <code>Camera</code></p> <p>Implementation class for Intel RealSense cameras using pyrealsense2</p> <p>This implementation uses threading to avoid blocking the main thread. The camera runs a background thread that continuously captures frames, allowing async_read() to return the latest frame without blocking.</p> <p>Based on LeRobot's implementation adapted for robopy architecture.</p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the RealSense camera and start background capture thread.</p> <code>disconnect</code> <p>Disconnect from the camera and stop background thread.</p> <code>find_cameras</code> <p>Find available Intel RealSense cameras connected to the system.</p> ATTRIBUTE DESCRIPTION <code>is_connected</code> <p> TYPE: <code>bool</code> </p>"},{"location":"api/sensors/#robopy.sensors.visual.realsense_camera.RealsenseCamera.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre>"},{"location":"api/sensors/#robopy.sensors.visual.realsense_camera.RealsenseCamera.connect","title":"connect","text":"<pre><code>connect(warmup: bool = True) -&gt; None\n</code></pre> <p>Connect to the RealSense camera and start background capture thread.</p>"},{"location":"api/sensors/#robopy.sensors.visual.realsense_camera.RealsenseCamera.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from the camera and stop background thread.</p>"},{"location":"api/sensors/#robopy.sensors.visual.realsense_camera.RealsenseCamera.find_cameras","title":"find_cameras  <code>staticmethod</code>","text":"<pre><code>find_cameras() -&gt; list[dict[str, Any]]\n</code></pre> <p>Find available Intel RealSense cameras connected to the system.</p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>List of dictionaries containing camera information.</p>"},{"location":"api/sensors/#webcamera","title":"WebCamera","text":""},{"location":"api/sensors/#robopy.sensors.visual.web_camera.WebCamera","title":"WebCamera","text":"<pre><code>WebCamera(camera_index: int, name: str, config: WebCameraConfig | None, **kwargs: object)\n</code></pre> <p>               Bases: <code>Camera</code></p> <p>Implementation class for cameras using OpenCV</p> <p>Initialize a WebCamera instance.</p> PARAMETER DESCRIPTION <code>camera_index</code> <p>Index or device id used by OpenCV to open the camera.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>Human readable name for the camera instance.</p> <p> TYPE: <code>str</code> </p> <code>config</code> <p>Optional camera configuration. If None, a default WebCameraConfig will be used.</p> <p> TYPE: <code>WebCameraConfig | None</code> </p> <code>**kwargs</code> <p>Extra keyword arguments to override attributes of the provided <code>config</code> object (only attributes that exist on the config will be set).</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p> <p>The constructor does not open the device; call <code>connect()</code> to open the camera and apply configured settings.</p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the camera.</p> <code>disconnect</code> <p>Disconnect and release camera resources.</p> ATTRIBUTE DESCRIPTION <code>is_connected</code> <p> TYPE: <code>bool</code> </p>"},{"location":"api/sensors/#robopy.sensors.visual.web_camera.WebCamera.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre>"},{"location":"api/sensors/#robopy.sensors.visual.web_camera.WebCamera.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre> <p>Connect to the camera.</p> RAISES DESCRIPTION <code>OSError</code> <p>Unsupported OS</p>"},{"location":"api/sensors/#robopy.sensors.visual.web_camera.WebCamera.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect and release camera resources.</p> <p>This will release the underlying OpenCV VideoCapture if it is open and mark the camera as not connected. It is safe to call repeatedly.</p>"},{"location":"api/sensors/#_2","title":"\u30ab\u30e1\u30e9\u8a2d\u5b9a","text":""},{"location":"api/sensors/#robopy.config.sensor_config.visual_config.RealsenseCameraConfig","title":"RealsenseCameraConfig  <code>dataclass</code>","text":"<pre><code>RealsenseCameraConfig(fps: int | float | None = 30, width: int | float | None = None, height: int | float | None = None, color_mode: Literal['rgb', 'bgr'] = 'rgb', auto_exposure: bool = False, exposure: float | None = 190.0, auto_white_balance: bool = False, white_balance: float | None = 3300.0, serial_no: str | None = None, name: str = 'main', index: int = 0, warmup_s: float = 1.0, is_depth_camera: bool = True, is_realsense: bool = True, min_depth: float = 100.0, max_depth: float = 2000.0)\n</code></pre> <p>               Bases: <code>CameraConfig</code></p> <p>Configuration class for RealSense cameras.</p>"},{"location":"api/sensors/#robopy.config.sensor_config.visual_config.WebCameraConfig","title":"WebCameraConfig  <code>dataclass</code>","text":"<pre><code>WebCameraConfig(fps: int | float | None = None, width: int | float | None = None, height: int | float | None = None, color_mode: Literal['rgb', 'bgr'] = 'rgb', auto_exposure: bool = False, exposure: float | None = 190.0, auto_white_balance: bool = False, white_balance: float | None = 3300.0, serial_no: str | None = None, is_depth_camera: bool = False, is_realsense: bool = False)\n</code></pre> <p>               Bases: <code>CameraConfig</code></p> <p>Configuration class for web cameras using OpenCV.</p>"},{"location":"api/sensors/#_3","title":"\u89e6\u899a\u30bb\u30f3\u30b5\u30fc","text":""},{"location":"api/sensors/#digitsensor","title":"DigitSensor","text":""},{"location":"api/sensors/#robopy.sensors.tactile.digit_sensor.DigitSensor","title":"DigitSensor","text":"<pre><code>DigitSensor(config: TactileParams)\n</code></pre> <p>               Bases: <code>Sensor</code></p> METHOD DESCRIPTION <code>connect</code> <code>disconnect</code> ATTRIBUTE DESCRIPTION <code>is_connected</code> <p> TYPE: <code>bool</code> </p>"},{"location":"api/sensors/#robopy.sensors.tactile.digit_sensor.DigitSensor.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre>"},{"location":"api/sensors/#robopy.sensors.tactile.digit_sensor.DigitSensor.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre>"},{"location":"api/sensors/#robopy.sensors.tactile.digit_sensor.DigitSensor.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre>"},{"location":"api/sensors/#_4","title":"\u30bf\u30af\u30bf\u30a4\u30eb\u8a2d\u5b9a","text":""},{"location":"api/sensors/#robopy.config.sensor_config.TactileParams","title":"TactileParams  <code>dataclass</code>","text":"<pre><code>TactileParams(serial_num: str, name: str = 'main', fps: int | None = 30)\n</code></pre>"},{"location":"api/sensors/#_5","title":"\u30bb\u30f3\u30b5\u30fc\u7d71\u5408","text":""},{"location":"api/sensors/#rakudasensorparams","title":"RakudaSensorParams","text":""},{"location":"api/sensors/#robopy.config.robot_config.rakuda_config.RakudaSensorParams","title":"RakudaSensorParams  <code>dataclass</code>","text":"<pre><code>RakudaSensorParams(cameras: List[CameraParams] = list(), tactile: List[TactileParams] = list())\n</code></pre>"},{"location":"api/sensors/#cameraparams","title":"CameraParams","text":""},{"location":"api/sensors/#robopy.config.sensor_config.CameraParams","title":"CameraParams  <code>dataclass</code>","text":"<pre><code>CameraParams(name: str, width: int, height: int, fps: int)\n</code></pre>"},{"location":"api/sensors/#_6","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"api/sensors/#realsense","title":"RealSense\u30ab\u30e1\u30e9\u306e\u4f7f\u7528","text":"<pre><code>from robopy.sensors.visual.realsense_camera import RealsenseCamera\nfrom robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u8a2d\u5b9a\u306e\u4f5c\u6210\nconfig = RealsenseCameraConfig(\n    fps=30,\n    width=640,\n    height=480,\n    color_mode=\"rgb\"\n)\n\n# \u30ab\u30e1\u30e9\u306e\u4f5c\u6210\u3068\u63a5\u7d9a\ncamera = RealsenseCamera(\"main\", config)\ncamera.connect()\n\ntry:\n    # \u753b\u50cf\u30ad\u30e3\u30d7\u30c1\u30e3\n    image = camera.capture()\n    print(f\"\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u753b\u50cf\u30b5\u30a4\u30ba: {image.shape}\")\n\nfinally:\n    camera.disconnect()\n</code></pre>"},{"location":"api/sensors/#_7","title":"\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u306e\u4f7f\u7528","text":"<pre><code>from robopy.sensors.tactile.digit_sensor import DigitSensor\n\n# \u30bb\u30f3\u30b5\u30fc\u306e\u4f5c\u6210\uff08\u30b7\u30ea\u30a2\u30eb\u756a\u53f7\u3092\u6307\u5b9a\uff09\nsensor = DigitSensor(\"left\", \"D20542\")\nsensor.connect()\n\ntry:\n    # \u30bf\u30af\u30bf\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n    tactile_data = sensor.capture()\n    print(f\"\u30bf\u30af\u30bf\u30a4\u30eb\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba: {tactile_data.shape}\")\n\nfinally:\n    sensor.disconnect()\n</code></pre>"},{"location":"api/sensors/#_8","title":"\u8907\u6570\u30bb\u30f3\u30b5\u30fc\u306e\u7d71\u5408","text":"<pre><code>from robopy import RakudaConfig, RakudaSensorParams, TactileParams\nfrom robopy.config.sensor_config import CameraParams\nfrom robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u7d71\u5408\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\nsensors = RakudaSensorParams(\n    cameras=[\n        CameraParams(\n            name=\"main\",\n            config=RealsenseCameraConfig(\n                fps=30,\n                width=640,\n                height=480,\n                color_mode=\"rgb\"\n            )\n        )\n    ],\n    tactile=[\n        TactileParams(serial_num=\"D20542\", name=\"left\"),\n        TactileParams(serial_num=\"D20537\", name=\"right\"),\n    ]\n)\n\n# \u30ed\u30dc\u30c3\u30c8\u8a2d\u5b9a\u306b\u7d71\u5408\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=sensors\n)\n</code></pre>"},{"location":"api/sensors/#_9","title":"\u30ab\u30e1\u30e9\u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa","text":"<pre><code>from robopy.sensors.visual.realsense_camera import RealsenseCamera\n\n# \u5229\u7528\u53ef\u80fd\u306aRealSense\u30ab\u30e1\u30e9\u3092\u691c\u51fa\ncameras = RealsenseCamera.find_cameras()\nprint(f\"\u691c\u51fa\u3055\u308c\u305f\u30ab\u30e1\u30e9: {cameras}\")\n\nfor camera_info in cameras:\n    print(f\"\u30ab\u30e1\u30e9\u540d: {camera_info['name']}\")\n    print(f\"\u30b7\u30ea\u30a2\u30eb\u756a\u53f7: {camera_info['serial']}\")\n</code></pre>"},{"location":"api/sensors/#_10","title":"\u30bb\u30f3\u30b5\u30fc\u306e\u72b6\u614b\u78ba\u8a8d","text":"<pre><code># \u30ab\u30e1\u30e9\u306e\u63a5\u7d9a\u72b6\u614b\u78ba\u8a8d\nif camera.is_connected:\n    print(\"\u2705 \u30ab\u30e1\u30e9\u306f\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u3059\")\nelse:\n    print(\"\u274c \u30ab\u30e1\u30e9\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\")\n\n# \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u306e\u63a5\u7d9a\u72b6\u614b\u78ba\u8a8d\nif sensor.is_connected:\n    print(\"\u2705 \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u306f\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u3059\")\nelse:\n    print(\"\u274c \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\")\n</code></pre>"},{"location":"api/utils/","title":"Utils API","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u6a5f\u80fd\u306b\u95a2\u9023\u3059\u308bAPI\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"api/utils/#_1","title":"\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc","text":""},{"location":"api/utils/#rakudaexphandler","title":"RakudaExpHandler","text":""},{"location":"api/utils/#robopy.utils.exp_interface.rakuda_exp_handler.RakudaExpHandler","title":"RakudaExpHandler","text":"<pre><code>RakudaExpHandler(rakuda_config: RakudaConfig, metadata_config: MetaDataConfig, fps: int = 10)\n</code></pre> <p>               Bases: <code>ExpHandler</code></p> <p>This class handles the experimental interface for the Rakuda robot.</p> <p>Sensors: 1x Realsense, 2x Digit,</p> <p>Example: <pre><code>from robopy.utils.exp_interface import RakudaExpHandler\nhandler = RakudaExpHandler(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    left_digit_serial=\"D20542\",\n    right_digit_serial=\"D20537\",\n    fps=20,\n)\nhandler.record_save(max_frames=150, save_path=\"test_01\", if_async=True)\n</code></pre></p> <p>init initialize Rakuda experimental handler</p> PARAMETER DESCRIPTION <code>leader_port</code> <p>leader serial port</p> <p> TYPE: <code>str</code> </p> <code>follower_port</code> <p>follower serial port</p> <p> TYPE: <code>str</code> </p> <code>left_digit_serial</code> <p>left digit serial number</p> <p> TYPE: <code>str</code> </p> <code>right_digit_serial</code> <p>right digit serial number</p> <p> TYPE: <code>str</code> </p> <code>fps</code> <p>The frequency to capture obs. Defaults to 10</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>fps must be between 1 and 20</p> <code>RuntimeError</code> <p>failed to connect to Rakuda robot</p> METHOD DESCRIPTION <code>record_save</code> <p>record and save data from Rakuda robot</p>"},{"location":"api/utils/#robopy.utils.exp_interface.rakuda_exp_handler.RakudaExpHandler.record_save","title":"record_save","text":"<pre><code>record_save(max_frames: int, save_path: str, save_gif: bool = True, warmup_time: int = 5) -&gt; None\n</code></pre> <p>record and save data from Rakuda robot</p> PARAMETER DESCRIPTION <code>max_frames</code> <p>maximum number of frames to record</p> <p> TYPE: <code>int</code> </p> <code>save_path</code> <p>path to save the recorded data:</p> <p> TYPE: <code>str</code> </p> <code>save_gif</code> <p>if save gif. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>warmup_time</code> <p>warm up time before recording. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>failed to record from Rakuda robot</p> <code>RuntimeError</code> <p>failed to save data</p>"},{"location":"api/utils/#_2","title":"\u30c7\u30fc\u30bf\u51e6\u7406","text":""},{"location":"api/utils/#h5handler","title":"H5Handler","text":""},{"location":"api/utils/#robopy.utils.h5_handler.H5Handler","title":"H5Handler","text":"<p>Handler for saving and loading data using HDF5 format with h5py.</p> METHOD DESCRIPTION <code>get_info</code> <p>Get information about HDF5 file structure.</p> <code>load_hierarchical</code> <p>Load hierarchical data structure from HDF5 file.</p>"},{"location":"api/utils/#robopy.utils.h5_handler.H5Handler.get_info","title":"get_info  <code>staticmethod</code>","text":"<pre><code>get_info(file_path: str) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about HDF5 file structure.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the HDF5 file.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: Information about file structure and sizes.</p>"},{"location":"api/utils/#robopy.utils.h5_handler.H5Handler.load_hierarchical","title":"load_hierarchical  <code>staticmethod</code>","text":"<pre><code>load_hierarchical(file_path: str) -&gt; Dict[str, Any]\n</code></pre> <p>Load hierarchical data structure from HDF5 file.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the HDF5 file.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: Hierarchical dictionary containing loaded data.</p> Example <p>data = H5Handler.load_hierarchical('output.h5') camera_data = data['camera']['main']  # Access nested data</p>"},{"location":"api/utils/#blocshandler","title":"BlocsHandler","text":""},{"location":"api/utils/#robopy.utils.blosc_handler.BLOSCHandler","title":"BLOSCHandler","text":"<pre><code>BLOSCHandler()\n</code></pre> METHOD DESCRIPTION <code>load</code> <p>Load data dictionary from a Blosc2 file.</p> <code>save</code> <p>Save data dictionary to a Blosc2 file.</p>"},{"location":"api/utils/#robopy.utils.blosc_handler.BLOSCHandler.load","title":"load  <code>staticmethod</code>","text":"<pre><code>load(path: str) -&gt; NDArray\n</code></pre> <p>Load data dictionary from a Blosc2 file.</p>"},{"location":"api/utils/#robopy.utils.blosc_handler.BLOSCHandler.save","title":"save  <code>staticmethod</code>","text":"<pre><code>save(data: NDArray, path: str) -&gt; None\n</code></pre> <p>Save data dictionary to a Blosc2 file.</p>"},{"location":"api/utils/#_3","title":"\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570","text":""},{"location":"api/utils/#find_usb_port","title":"find_usb_port","text":""},{"location":"api/utils/#robopy.utils.find_usb_port","title":"find_usb_port","text":"FUNCTION DESCRIPTION <code>find_available_ports</code> <p>Find available USB ports on the system.</p>"},{"location":"api/utils/#robopy.utils.find_usb_port.find_available_ports","title":"find_available_ports","text":"<pre><code>find_available_ports() -&gt; list[str]\n</code></pre> <p>Find available USB ports on the system.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: A list of available USB port names.</p>"},{"location":"api/utils/#_4","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"api/utils/#_5","title":"\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u8a18\u9332\u3068\u4fdd\u5b58","text":"<pre><code>from robopy.config import RakudaConfig, RakudaSensorParams, TactileParams\nfrom robopy.utils.exp_interface import RakudaExpHandler\n\n# \u8a2d\u5b9a\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=RakudaSensorParams(\n        tactile=[\n            TactileParams(serial_num=\"D20542\", name=\"left\"),\n            TactileParams(serial_num=\"D20537\", name=\"right\"),\n        ],\n    ),\n)\n\n# \u30cf\u30f3\u30c9\u30e9\u30fc\u4f5c\u6210\nhandler = RakudaExpHandler(\n    rakuda_config=config,\n    fps=20\n)\n\n# \u30c7\u30fc\u30bf\u8a18\u9332\u3068\u4fdd\u5b58\nhandler.record_save(\n    max_frames=1000,\n    save_path=\"experiment_001\",\n    if_async=True\n)\n</code></pre>"},{"location":"api/utils/#h5","title":"H5\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u4fdd\u5b58","text":"<pre><code>from robopy.utils import H5Handler\n\n# H5\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u53d6\u5f97\nfile_info = H5Handler.get_info(\"path/to/data.h5\")\n\n# \u968e\u5c64\u7684\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nhierarchical_data = H5Handler.load_hierarchical(\"path/to/data.h5\")\n\n# \u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\nimport h5py\nwith h5py.File(\"output.h5\", \"w\") as f:\n    f.create_dataset(\"array_data\", data=your_data)\n</code></pre>"},{"location":"developer/development/","title":"Development Guide","text":""},{"location":"developer/development/#_1","title":"\u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>Robopy\u306e\u958b\u767a\u3092\u59cb\u3081\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u958b\u767a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002</p>"},{"location":"developer/development/#_2","title":"\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30af\u30ed\u30fc\u30f3","text":"<pre><code>git clone https://github.com/keio-crl/robopy.git\n</code></pre>"},{"location":"developer/development/#_3","title":"\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code>cd robopy\n# \u958b\u767a\u7528\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuv sync --group dev \n# docs \u7528\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuv sync --group docs \n# \u3059\u3079\u3066\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuv sync --all-groups \n</code></pre>"},{"location":"developer/development/#_4","title":"\u30b3\u30fc\u30c9\u30b9\u30bf\u30a4\u30eb","text":"<p>Robopy\u3067\u306f\u3001\u30b3\u30fc\u30c9\u306e\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u305f\u3081\u306b\u4ee5\u4e0b\u306e\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u5f93\u3063\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>Formatting: <code>ruff</code>\u3092linter\u3068formatter\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>Type Checking: <code>mypy</code>\u3092\u4f7f\u7528\u3057\u3066\u578b\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 </li> <li>Testing: <code>pytest</code>\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002</li> </ul> <pre><code># \u30b3\u30fc\u30c9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u578b\u30c1\u30a7\u30c3\u30af\nruff check src tests\nmypy src\n</code></pre>"},{"location":"experiments/handlers/","title":"\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc","text":"<p>Robopy\u306e\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u306f\u3001\u30ed\u30dc\u30c3\u30c8\u306e\u5236\u5fa1\u3068\u30c7\u30fc\u30bf\u53ce\u96c6\u3092\u7d71\u5408\u3057\u3001\u30c7\u30fc\u30bf\u53ce\u96c6\u30d7\u30ed\u30bb\u30b9\u3092\u7c21\u7d20\u5316\u3059\u308b\u305f\u3081\u306e\u9ad8\u30ec\u30d9\u30eb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002</p>"},{"location":"experiments/handlers/#rakudaexphandler","title":"RakudaExpHandler","text":"<p><code>RakudaExpHandler</code>\u306f\u3001Rakuda\u30ed\u30dc\u30c3\u30c8\u3067\u306e\u5b9f\u9a13\u3092\u7c21\u5358\u306b\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30cf\u30a4\u30ec\u30d9\u30eb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002</p>"},{"location":"experiments/handlers/#_2","title":"\u7279\u5fb4","text":"<ul> <li>\u7d71\u5408\u5236\u5fa1: \u30ed\u30dc\u30c3\u30c8\u3001\u30bb\u30f3\u30b5\u30fc\u306e\u4e00\u62ec\u7ba1\u7406</li> <li>\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u64cd\u4f5c: \u5bfe\u8a71\u7684\u306a\u5b9f\u9a13\u5b9f\u884c</li> <li>\u81ea\u52d5\u4fdd\u5b58: \u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u4fdd\u5b58</li> <li>\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u751f\u6210: \u7d50\u679c\u306e\u81ea\u52d5\u53ef\u8996\u5316</li> </ul>"},{"location":"experiments/handlers/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"experiments/handlers/#_4","title":"\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u4f5c\u6210","text":"<p>Rakuda\u30ed\u30dc\u30c3\u30c8\u7528\u306e\u57fa\u672c\u7684\u306a\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u4f5c\u6210\u65b9\u6cd5\uff1a</p> DefaultCustom <pre><code>    from robopy.config import RakudaConfig, RakudaSensorParams, TactileParams\n    from robopy.utils import RakudaExpHandler\n\n\n    # RealSense\u30ab\u30e1\u30e9\u8a2d\u5b9a\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09, \u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u81ea\u52d5\u7684\u306b name = \"main\"\u3068\u3057\u30661\u3064\u306e\u30ab\u30e1\u30e9\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\n    # tactile\u30bb\u30f3\u30b5\u30fc\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f7f\u7528\u3055\u308c\u306a\u3044\n    config=RakudaConfig(\n        leader_port=\"/dev/ttyUSB0\",\n        follower_port=\"/dev/ttyUSB1\",\n    )\n\n    handler = RakudaExpHandler(\n        rakuda_config=config,\n        fps=10 # \u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (max 30)\n    )\n\n    # \u30c7\u30fc\u30bf\u8a18\u9332\u3068\u4fdd\u5b58\n    handler.record_save(\n        max_frames=150, # \u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\n        save_path=\"experiment_001\", # \u4fdd\u5b58\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: data/experiment_001/...\n    )\n</code></pre> <pre><code>    from robopy.config import RakudaConfig, RakudaSensorParams, TactileParams\n    from robopy.utils import RakudaExpHandler\n\n    config=RakudaConfig(\n        leader_port=\"/dev/ttyUSB0\",\n        follower_port=\"/dev/ttyUSB1\",\n        sensors=RakudaSensorParams(\n            camera=[\n                CameraParams(name=\"main\",width=640,height=480,fps=30),\n                ...\n            ],\n            tactile=[\n                TactileParams(serial_num=\"D20542\", name=\"left_digit\", fps=30),\n                TactileParams(serial_num=\"D20537\", name=\"right_digit\", fps=30),\n            ],\n        ),\n    )\n\n    handler = RakudaExpHandler(\n        rakuda_config=config,\n        fps=10 # \u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (max 30)\n    )\n\n    # \u30c7\u30fc\u30bf\u8a18\u9332\u3068\u4fdd\u5b58\n    handler.record_save(\n        max_frames=150, # \u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\n        save_path=\"experiment_001\", # \u4fdd\u5b58\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: data/experiment_001/...\n    )\n</code></pre> <p>\u3053\u3053\u3067\u3001camera\u3092\u5ba3\u8a00\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306eRealsense\u30ab\u30e1\u30e9\u8a2d\u5b9a\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"experiments/handlers/#_5","title":"\u5b9f\u9a13\u306e\u5b9f\u884c","text":"<pre><code># \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u5b9f\u9a13\u5b9f\u884c\nhandler.record_save(\n    max_frames=1000,\n    save_path=\"experiment_001\",\n    if_async=True\n)\n</code></pre>"},{"location":"experiments/handlers/#_6","title":"\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u3068\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u751f\u6210","text":""},{"location":"experiments/handlers/#_7","title":"\u6ce8\u610f\u70b9\u3068\u5236\u9650","text":"<p>\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u53ce\u96c6\u3057\u305f\u30c7\u30fc\u30bf\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f<code>save_path</code>\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u4fdd\u5b58\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306b\u306f\u3001\u30ed\u30dc\u30c3\u30c8\u306e\u72b6\u614b\u3001\u30bb\u30f3\u30b5\u30fc\u306e\u8aad\u307f\u53d6\u308a\u5024\u3001\u30ab\u30e1\u30e9\u753b\u50cf\u306a\u3069\u304c\u542b\u307e\u308c\u307e\u3059\u3002</p>"},{"location":"experiments/handlers/#_8","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8003\u616e","text":"<ul> <li>\u9ad8\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8: 30Hz\u4ee5\u4e0a\u3067\u306f\u51e6\u7406\u80fd\u529b\u306b\u6ce8\u610f</li> <li>\u30bb\u30f3\u30b5\u30fc\u6570: \u591a\u6570\u306e\u30bb\u30f3\u30b5\u30fc\u306f\u51e6\u7406\u8ca0\u8377\u3092\u5897\u52a0</li> <li>\u8a18\u9332\u6642\u9593: \u9577\u6642\u9593\u8a18\u9332\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306b\u6ce8\u610f</li> </ul>"},{"location":"experiments/handlers/#_9","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"<pre><code>try:\n    handler.record_save(\n        max_frames=1000,\n        save_path=\"experiment_001\",\n        if_async=True\n    )\nexcept KeyboardInterrupt:\n    print(\"\u26a0\ufe0f  \u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4e2d\u65ad\u3055\u308c\u307e\u3057\u305f\")\nexcept Exception as e:\n    print(f\"\u274c \u5b9f\u9a13\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f: {e}\")\n    # \u90e8\u5206\u7684\u306a\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u306a\u3069\n</code></pre>"},{"location":"experiments/handlers/#api","title":"\u95a2\u9023API","text":"<ul> <li>RakudaExpHandler - \u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u30af\u30e9\u30b9</li> <li>RakudaRobot - \u30d9\u30fc\u30b9\u30ed\u30dc\u30c3\u30c8\u30af\u30e9\u30b9</li> <li>BlocsHandler - \u30c7\u30fc\u30bf\u4fdd\u5b58\u30af\u30e9\u30b9</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#_1","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.12\u4ee5\u4e0a</li> <li>Linux\u74b0\u5883\uff08RealSense\u30ab\u30e1\u30e9\u4f7f\u7528\u6642\uff09</li> <li>UV \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\uff08\u63a8\u5968\uff09</li> </ul>"},{"location":"getting-started/installation/#_2","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":""},{"location":"getting-started/installation/#uv","title":"uv \uff08\u63a8\u5968\uff09","text":"<p>UV \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc</p> <p>UV\u306f\u9ad8\u901f\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3067\u3059\u3002\u307e\u3060\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code># \u57fa\u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuv add git+https://github.com/keio-crl/robopy.git --tag v0.3.0\n# RealSense\u30b5\u30dd\u30fc\u30c8\uff08Linux\uff09\nuv add pyrealsense2\n</code></pre>"},{"location":"getting-started/installation/#pip","title":"pip\u74b0\u5883","text":"<pre><code>git clone https://github.com/keio-crl/robopy.git\ncd robopy\npip install -e .\n\n# RealSense\u30b5\u30dd\u30fc\u30c8\uff08Linux\uff09\npip install pyrealsense2\n</code></pre>"},{"location":"getting-started/installation/#_3","title":"\u4f9d\u5b58\u95a2\u4fc2","text":""},{"location":"getting-started/installation/#_4","title":"\u5fc5\u9808\u4f9d\u5b58\u95a2\u4fc2","text":"\u30d1\u30c3\u30b1\u30fc\u30b8 \u30d0\u30fc\u30b8\u30e7\u30f3 \u7528\u9014 <code>blosc2</code> &gt;=3.8.0 \u30c7\u30fc\u30bf\u5727\u7e2e <code>digit-interface</code> &gt;=0.2.1 \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc <code>dynamixel-sdk</code> &gt;=3.7.31 Dynamixel\u30e2\u30fc\u30bf\u30fc\u5236\u5fa1 <code>matplotlib</code> &gt;=3.10.6 \u30c7\u30fc\u30bf\u53ef\u8996\u5316 <code>numpy</code> &gt;=2.2.6 \u6570\u5024\u8a08\u7b97 <code>opencv-python</code> &gt;=4.12.0.88 \u753b\u50cf\u51e6\u7406 <code>rich</code> &gt;=14.1.0 \u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b"},{"location":"getting-started/installation/#_5","title":"\u30aa\u30d7\u30b7\u30e7\u30f3\u4f9d\u5b58\u95a2\u4fc2","text":"\u30d1\u30c3\u30b1\u30fc\u30b8 \u30d0\u30fc\u30b8\u30e7\u30f3 \u7528\u9014 \u5bfe\u5fdcOS <code>pyrealsense2</code> &gt;=2.54.2 Intel RealSense\u30ab\u30e1\u30e9 Linux\u5c02\u7528"},{"location":"getting-started/installation/#_6","title":"\u958b\u767a\u4f9d\u5b58\u95a2\u4fc2","text":"\u30d1\u30c3\u30b1\u30fc\u30b8 \u30d0\u30fc\u30b8\u30e7\u30f3 \u7528\u9014 <code>mypy</code> &gt;=1.17.1 \u578b\u30c1\u30a7\u30c3\u30af <code>pytest</code> &gt;=8.4.1 \u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af <code>ruff</code> &gt;=0.12.11 \u30ea\u30f3\u30bf\u30fc/\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc"},{"location":"getting-started/installation/#_7","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f9d\u5b58\u95a2\u4fc2","text":"\u30d1\u30c3\u30b1\u30fc\u30b8 \u30d0\u30fc\u30b8\u30e7\u30f3 \u7528\u9014 <code>mkdocs</code> &gt;=1.6.1 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u751f\u6210 <code>mkdocs-material</code> &gt;=9.5.0 Material \u30c6\u30fc\u30de <code>mkdocstrings[python]</code> &gt;=0.24.0 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u81ea\u52d5\u751f\u6210"},{"location":"getting-started/installation/#_8","title":"\u4f9d\u5b58\u95a2\u4fc2\u306e\u78ba\u8a8d","text":"UV\u74b0\u5883pip\u74b0\u5883 <pre><code># \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u78ba\u8a8d\nuv tree\n\n# \u7279\u5b9a\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u78ba\u8a8d\nuv list | grep robopy\n</code></pre> <pre><code># \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u78ba\u8a8d\npip list | grep robopy\n\n# \u4f9d\u5b58\u95a2\u4fc2\u306e\u78ba\u8a8d\npip show robopy\n</code></pre>"},{"location":"getting-started/installation/#_9","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"getting-started/installation/#realsense","title":"RealSense\u30ab\u30e1\u30e9\u304c\u8a8d\u8b58\u3055\u308c\u306a\u3044","text":"<p>Linux\u5c02\u7528</p> <p>RealSense\u30ab\u30e1\u30e9\u306f\u73fe\u5728Linux\u74b0\u5883\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"getting-started/installation/#dynamixel","title":"Dynamixel\u30e2\u30fc\u30bf\u30fc\u306b\u63a5\u7d9a\u3067\u304d\u306a\u3044","text":""},{"location":"getting-started/installation/#1","title":"1. \u30dd\u30fc\u30c8\u6a29\u9650\u306e\u78ba\u8a8d","text":"<pre><code># \u30dd\u30fc\u30c8\u6a29\u9650\u306e\u8a2d\u5b9a\nsudo chmod 666 /dev/ttyUSB*\n\n# \u307e\u305f\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u3092dialout\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\nsudo usermod -a -G dialout $USER\n# \u203b\u30ed\u30b0\u30a2\u30a6\u30c8\u30fb\u30ed\u30b0\u30a4\u30f3\u304c\u5fc5\u8981\n</code></pre>"},{"location":"getting-started/installation/#2","title":"2. \u30dd\u30fc\u30c8\u8a2d\u5b9a\u306e\u78ba\u8a8d","text":"<pre><code>from robopy.motor.dynamixel_bus import DynamixelBus\n\n# \u30d0\u30b9\u63a5\u7d9a\u30c6\u30b9\u30c8\nbus = DynamixelBus(\"/dev/ttyUSB0\", 1000000)\nmotors = bus.scan_motors()\nprint(f\"\u691c\u51fa\u3055\u308c\u305f\u30e2\u30fc\u30bf\u30fc: {motors}\")\n</code></pre>"},{"location":"getting-started/installation/#3","title":"3. \u4e00\u822c\u7684\u306a\u30dd\u30fc\u30c8\u554f\u984c","text":"<pre><code># USB\u30dd\u30fc\u30c8\u306e\u78ba\u8a8d\nls -la /dev/ttyUSB*\n\n# dmesg\u3067USB\u30c7\u30d0\u30a4\u30b9\u306e\u30ed\u30b0\u78ba\u8a8d\ndmesg | tail -20\n</code></pre>"},{"location":"getting-started/installation/#_10","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30a8\u30e9\u30fc","text":""},{"location":"getting-started/installation/#uv_1","title":"UV\u74b0\u5883\u3067\u306e\u554f\u984c","text":"<pre><code># \u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30ea\u30a2\nuv cache clean\n\n# \u4f9d\u5b58\u95a2\u4fc2\u306e\u518d\u89e3\u6c7a\nuv lock --upgrade\nuv sync\n</code></pre>"},{"location":"getting-started/installation/#pip_1","title":"pip\u74b0\u5883\u3067\u306e\u554f\u984c","text":"<pre><code># \u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30ea\u30a2\npip cache purge\n\n# \u5f37\u5236\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install --force-reinstall robopy\n</code></pre>"},{"location":"getting-started/installation/#python","title":"Python \u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u554f\u984c","text":"<pre><code># Python\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u78ba\u8a8d\npython --version\n\n# 3.12\u4ee5\u4e0a\u304c\u5fc5\u8981\npython -c \"import sys; print(sys.version_info &gt;= (3, 12))\"\n</code></pre>"},{"location":"getting-started/quickstart/","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001Robopy\u3092\u4f7f\u7528\u3057\u3066\u30ed\u30dc\u30c3\u30c8\u3092\u5236\u5fa1\u3057\u3001\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"getting-started/quickstart/#rakuda-robot","title":"Rakuda Robot\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"getting-started/quickstart/#quickstart","title":"Quickstart","text":""},{"location":"getting-started/quickstart/#_2","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"uv\uff08\u63a8\u5968\uff09pip <pre><code># \u57fa\u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuv add git+https://github.com/keio-crl/robopy.git --tag v0.3.0\n# RealSense\u30b5\u30dd\u30fc\u30c8\uff08Linux\uff09\nuv add pyrealsense2\n</code></pre> <pre><code># \u57fa\u672c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ngit clone https://github.com/keio-crl/robopy.git\ncd robopy\npip install -e .\n\n# RealSense\u30b5\u30dd\u30fc\u30c8\uff08Linux\uff09\npip install pyrealsense2\n</code></pre>"},{"location":"getting-started/quickstart/#1","title":"1. \u30c7\u30fc\u30bf\u53ce\u96c6\u306e\u57fa\u672c","text":"<p>\u30dd\u30fc\u30c8\u8a2d\u5b9a</p> <p>USB\u30dd\u30fc\u30c8\u306f\u74b0\u5883\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002<code>ls /dev/ttyUSB*</code>\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> \u8996\u899a\u306e\u307f\u89e6\u899a\u30bb\u30f3\u30b5\u30fc\u4ed8\u304d <pre><code>    from robopy.config import RakudaConfig, RakudaSensorParams, TactileParams\n    from robopy.utils import RakudaExpHandler\n\n\n\n    config=RakudaConfig(\n        leader_port=\"/dev/ttyUSB0\",\n        follower_port=\"/dev/ttyUSB1\",\n    )\n\n    handler = RakudaExpHandler(\n        rakuda_config=config,\n        fps=10 # \u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (max 20)\n    )\n\n    # \u30c7\u30fc\u30bf\u8a18\u9332\u3068\u4fdd\u5b58\n    handler.record_save(\n        max_frames=150, # \u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\n        save_path=\"experiment_001\", # \u4fdd\u5b58\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: data/experiment_001/...\n    )\n</code></pre> <pre><code>    from robopy.config import RakudaConfig, RakudaSensorParams, TactileParams\n    from robopy.utils import RakudaExpHandler\n\n    config=RakudaConfig(\n        leader_port=\"/dev/ttyUSB0\",\n        follower_port=\"/dev/ttyUSB1\",\n        sensors=RakudaSensorParams(\n            tactile=[\n                TactileParams(serial_num=\"D20542\", name=\"left_digit\", fps=30),\n                TactileParams(serial_num=\"D20537\", name=\"right_digit\", fps=30),\n            ],\n        ),\n    )\n    handler = RakudaExpHandler(\n        rakuda_config=config,\n        fps=10\n    )\n    # \u30c7\u30fc\u30bf\u8a18\u9332\u3068\u4fdd\u5b58\n    handler.record_save(\n        max_frames=150, # \u53ce\u96c6\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\n        save_path=\"experiment_001\", # \u4fdd\u5b58\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: data/experiment_001/...\n    )\n</code></pre> <p>\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"getting-started/quickstart/#2","title":"2. \u30ed\u30dc\u30c3\u30c8\u306e\u63a5\u7d9a\u3068\u5236\u5fa1","text":"<pre><code>from robopy import RakudaRobot\n\n# \u30ed\u30dc\u30c3\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nrobot = RakudaRobot(config)\n\ntry:\n    # \u63a5\u7d9a\n    robot.connect()\n    print(\"\u2705 \u30ed\u30dc\u30c3\u30c8\u306b\u63a5\u7d9a\u3057\u307e\u3057\u305f\")\n\n    print(\"\ud83c\udfae \u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u307e\u3059...\")\n    robot.teleoperation()\n\nfinally:\n    # \u5207\u65ad\n    robot.disconnect()\n    print(\"\ud83d\udd0c \u30ed\u30dc\u30c3\u30c8\u304b\u3089\u5207\u65ad\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"getting-started/quickstart/#_3","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>Rakuda\u30ed\u30dc\u30c3\u30c8\u306e\u8a73\u7d30 - \u3088\u308a\u9ad8\u5ea6\u306a\u5236\u5fa1\u65b9\u6cd5</li> <li>\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a - \u30ab\u30e1\u30e9\u3068\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u306e\u8a2d\u5b9a</li> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u5168\u3066\u306e\u95a2\u6570\u3068\u30af\u30e9\u30b9\u306e\u8a73\u7d30</li> </ul>"},{"location":"robots/koch/","title":"Koch Robot","text":"<p><code>KochRobot</code>\u306f\u3001\u4e8c\u8155\u30ed\u30dc\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3067\u30ab\u30e1\u30e9\u30bb\u30f3\u30b5\u30fc\u3092\u7d71\u5408\u3057\u305f\u30ed\u30dc\u30c3\u30c8\u3067\u3059\u3002</p>"},{"location":"robots/koch/#_1","title":"\u69cb\u6210\u8981\u7d20","text":""},{"location":"robots/koch/#_2","title":"\u30ed\u30dc\u30c3\u30c8\u30a2\u30fc\u30e0","text":"<ul> <li>Leader Arm: \u64cd\u4f5c\u8005\u304c\u5236\u5fa1\u3059\u308b\u30a2\u30fc\u30e0</li> <li>Follower Arm: Leader\u306e\u52d5\u304d\u3092\u8ffd\u5f93\u3059\u308b\u30a2\u30fc\u30e0</li> </ul>"},{"location":"robots/koch/#_3","title":"\u30bb\u30f3\u30b5\u30fc\u7d71\u5408","text":"<ul> <li>\u30ab\u30e1\u30e9: Web\u30ab\u30e1\u30e9 \u307e\u305f\u306f Intel RealSense\u30ab\u30e1\u30e9\u5bfe\u5fdc</li> </ul>"},{"location":"robots/koch/#_4","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"robots/koch/#_5","title":"\u8a2d\u5b9a\u306e\u4f5c\u6210","text":"<pre><code>from robopy.config.robot_config.koch_config import KochConfig\n\n# \u57fa\u672c\u8a2d\u5b9a\nconfig = KochConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    camera_config=None  # \u30ab\u30e1\u30e9\u306a\u3057\n)\n</code></pre>"},{"location":"robots/koch/#_6","title":"\u30ab\u30e1\u30e9\u4ed8\u304d\u306e\u8a2d\u5b9a","text":"<pre><code>from robopy.config.robot_config.koch_config import KochConfig\nfrom robopy.config.sensor_config.visual_config import WebCameraConfig\n\n# Web\u30ab\u30e1\u30e9\u4ed8\u304d\u8a2d\u5b9a\nconfig = KochConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    camera_config=WebCameraConfig(\n        device_id=0,\n        fps=20,\n        width=640,\n        height=480\n    )\n)\n</code></pre>"},{"location":"robots/koch/#_7","title":"\u30ed\u30dc\u30c3\u30c8\u306e\u64cd\u4f5c","text":"<pre><code>from robopy.robots.koch.koch_robot import KochRobot\n\nrobot = KochRobot(config)\n\ntry:\n    # \u63a5\u7d9a\n    robot.connect()\n\n    # \u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\uff0810\u79d2\u9593\uff09\n    robot.teleoperation(duration=10)\n\nfinally:\n    robot.disconnect()\n</code></pre>"},{"location":"robots/koch/#_8","title":"\u30c7\u30fc\u30bf\u8a18\u9332","text":"<pre><code># \u30c7\u30fc\u30bf\u8a18\u9332\nobs = robot.record(max_frame=100, fps=5)\n\n# \u8a18\u9332\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nprint(f\"Leader \u30a2\u30fc\u30e0: {obs['arms']['leader'].shape}\")\nprint(f\"Follower \u30a2\u30fc\u30e0: {obs['arms']['follower'].shape}\")\n\nif obs['camera'] is not None:\n    print(f\"\u30ab\u30e1\u30e9: {obs['camera'].shape}\")\n</code></pre>"},{"location":"robots/koch/#_9","title":"\u8a18\u9332\u30c7\u30fc\u30bf\u69cb\u9020","text":"<p>\u8a18\u9332\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f<code>KochObs</code>\u578b\u3067\u3001\u4ee5\u4e0b\u306e\u69cb\u9020\u3092\u6301\u3061\u307e\u3059\uff1a</p> <pre><code>{\n    \"arms\": {\n        \"leader\": np.ndarray,    # (frames, joint_dims) - \u95a2\u7bc0\u89d2\u5ea6\u306a\u3069\n        \"follower\": np.ndarray,  # (frames, joint_dims) - \u95a2\u7bc0\u89d2\u5ea6\u306a\u3069\n    },\n    \"camera\": np.ndarray | None,  # (frames, H, W, C) - RGB\u753b\u50cf or None\n}\n</code></pre>"},{"location":"robots/koch/#_10","title":"\u95a2\u9023\u30af\u30e9\u30b9","text":"<ul> <li><code>KochConfig</code> - \u30ed\u30dc\u30c3\u30c8\u8a2d\u5b9a</li> <li><code>KochObs</code> - \u89b3\u6e2c\u30c7\u30fc\u30bf\u578b</li> </ul>"},{"location":"robots/rakuda/","title":"Rakuda Robot","text":"<p><code>RakudaRobot</code>\u306f\u3001\u4e8c\u8155\u30ed\u30dc\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3067Leader/Follower\u30a2\u30fc\u30e0\u69cb\u6210\u3092\u6301\u3064\u30ed\u30dc\u30c3\u30c8\u3067\u3059\u3002\u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u30c7\u30fc\u30bf\u53ce\u96c6\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"robots/rakuda/#_1","title":"\u69cb\u6210\u8981\u7d20","text":""},{"location":"robots/rakuda/#_2","title":"\u30ed\u30dc\u30c3\u30c8\u30a2\u30fc\u30e0","text":"<ul> <li>Leader Arm (<code>RakudaLeader</code>): \u64cd\u4f5c\u8005\u304c\u5236\u5fa1\u3059\u308b\u30a2\u30fc\u30e0</li> <li>Follower Arm (<code>RakudaFollower</code>): Leader\u306e\u52d5\u304d\u3092\u8ffd\u5f93\u3059\u308b\u30a2\u30fc\u30e0</li> <li>Pair System (<code>RakudaPairSys</code>): \u4e21\u30a2\u30fc\u30e0\u306e\u5354\u8abf\u5236\u5fa1</li> </ul>"},{"location":"robots/rakuda/#_3","title":"\u30bb\u30f3\u30b5\u30fc\u7d71\u5408","text":"<ul> <li>\u30ab\u30e1\u30e9: Intel RealSense\u30ab\u30e1\u30e9\u5bfe\u5fdc</li> <li>\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc: DIGIT\u89e6\u899a\u30bb\u30f3\u30b5\u30fc\u5bfe\u5fdc</li> </ul>"},{"location":"robots/rakuda/#_4","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"robots/rakuda/#_5","title":"\u8a2d\u5b9a\u306e\u4f5c\u6210","text":"<pre><code>from robopy import RakudaConfig, RakudaSensorParams, TactileParams\n\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=RakudaSensorParams(\n        cameras=None,\n        tactile=[\n            TactileParams(serial_num=\"D20542\", name=\"left\"),\n            TactileParams(serial_num=\"D20537\", name=\"right\"),\n        ],\n    ),\n    slow_mode=False,  # \u9ad8\u901f\u30e2\u30fc\u30c9\n)\n</code></pre>"},{"location":"robots/rakuda/#_6","title":"\u30ed\u30dc\u30c3\u30c8\u306e\u64cd\u4f5c","text":"<pre><code>from robopy import RakudaRobot\n\nrobot = RakudaRobot(config)\n\ntry:\n    # \u63a5\u7d9a\n    robot.connect()\n\n    # \u30c6\u30ec\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\uff0810\u79d2\u9593\uff09\n    robot.teleoperation(duration=10)\n\n    # \u30c7\u30fc\u30bf\u8a18\u9332\n    obs = robot.record_parallel(max_frame=500, fps=30)\n\nfinally:\n    robot.disconnect()\n</code></pre>"},{"location":"robots/rakuda/#_7","title":"\u30c7\u30fc\u30bf\u8a18\u9332\u6a5f\u80fd","text":""},{"location":"robots/rakuda/#_8","title":"\u6a19\u6e96\u8a18\u9332","text":"<pre><code># \u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u8a18\u9332\uff08\u4f4efps\u63a8\u5968\uff09\nobs = robot.record(max_frame=100, fps=5)\n</code></pre>"},{"location":"robots/rakuda/#_9","title":"\u4e26\u5217\u8a18\u9332","text":"<pre><code># \u4e26\u5217\u8a18\u9332\uff08\u9ad8fps\u5bfe\u5fdc\uff09\nobs = robot.record_parallel(\n    max_frame=1000, \n    fps=20,\n    max_processing_time_ms=25.0\n)\n</code></pre>"},{"location":"robots/rakuda/#_10","title":"\u8a18\u9332\u30c7\u30fc\u30bf\u69cb\u9020","text":"<p>\u8a18\u9332\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f<code>RakudaObs</code>\u578b\u3067\u3001\u4ee5\u4e0b\u306e\u69cb\u9020\u3092\u6301\u3061\u307e\u3059\uff1a</p> <pre><code>{\n    \"arms\": {\n        \"leader\": np.ndarray,    # (frames, 17) - \u95a2\u7bc0\u89d2\u5ea6\u306a\u3069\n        \"follower\": np.ndarray,  # (frames, 17) - \u95a2\u7bc0\u89d2\u5ea6\u306a\u3069\n    },\n    \"sensors\": {\n        \"cameras\": {\n            \"main\": np.ndarray,  # (frames, H, W, C) - RGB\u753b\u50cf\n        },\n        \"tactile\": {\n            \"left\": np.ndarray,  # (frames, H, W, C) - \u89e6\u899a\u30c7\u30fc\u30bf\n            \"right\": np.ndarray, # (frames, H, W, C) - \u89e6\u899a\u30c7\u30fc\u30bf\n        }\n    }\n}\n</code></pre>"},{"location":"robots/rakuda/#_11","title":"\u5b9f\u9a13\u30cf\u30f3\u30c9\u30e9\u30fc","text":"<p><code>RakudaExpHandler</code>\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3088\u308a\u7c21\u5358\u306b\u5b9f\u9a13\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from robopy.utils.exp_interface import RakudaExpHandler\n\nhandler = RakudaExpHandler(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    left_digit_serial=\"D20542\",\n    right_digit_serial=\"D20537\",\n    fps=30\n)\n\n# \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u8a18\u9332\u30fb\u4fdd\u5b58\nhandler.record_save(\n       max_frames=1000,\n    save_path=\"experiment_001\",\n    if_async=True\n)\n</code></pre>"},{"location":"robots/rakuda/#_12","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":""},{"location":"robots/rakuda/#_13","title":"\u4e26\u5217\u51e6\u7406","text":"<p><code>record_parallel()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u30a2\u30fc\u30e0\u5236\u5fa1\u3068\u30bb\u30f3\u30b5\u30fc\u8aad\u307f\u53d6\u308a\u3092\u4e26\u5217\u5316\u3057\u3066\u9ad8\u901f\u5316\u3057\u3066\u3044\u307e\u3059\uff1a</p> <pre><code># \u6700\u592725ms\u306e\u51e6\u7406\u6642\u9593\u5236\u9650\u306730Hz\u8a18\u9332\nobs = robot.record_parallel(\n       max_frame=1000,\n    fps=30,\n    max_processing_time_ms=25.0\n)\n</code></pre>"},{"location":"robots/rakuda/#_14","title":"\u30e1\u30e2\u30ea\u52b9\u7387","text":"<ul> <li>\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u306a\u3057</li> <li>\u6700\u65b0\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u4fdd\u6301</li> <li>\u52b9\u7387\u7684\u306a numpy \u914d\u5217\u5909\u63db</li> </ul>"},{"location":"robots/rakuda/#_15","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"robots/rakuda/#_16","title":"\u63a5\u7d9a\u30a8\u30e9\u30fc","text":"<pre><code>try:\n    robot.connect()\nexcept RuntimeError as e:\n    print(f\"\u63a5\u7d9a\u5931\u6557: {e}\")\n    # \u30dd\u30fc\u30c8\u3084\u30dc\u30fc\u30ec\u30fc\u30c8\u8a2d\u5b9a\u3092\u78ba\u8a8d\n</code></pre>"},{"location":"robots/rakuda/#_17","title":"\u30bb\u30f3\u30b5\u30fc\u8aad\u307f\u53d6\u308a\u30a8\u30e9\u30fc","text":"<pre><code># \u30bb\u30f3\u30b5\u30fc\u306e\u500b\u5225\u78ba\u8a8d\nif robot.sensors.tactile:\n    for sensor in robot.sensors.tactile:\n        if sensor.is_connected:\n            print(f\"{sensor.name}: \u63a5\u7d9aOK\")\n</code></pre>"},{"location":"robots/rakuda/#_18","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u554f\u984c","text":"<pre><code># \u30d5\u30ec\u30fc\u30e0\u30b9\u30ad\u30c3\u30d7\u78ba\u8a8d\nobs = robot.record_parallel(max_frame=100, fps=20)\n# \u30ed\u30b0\u3067\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u6570\u3092\u78ba\u8a8d\n</code></pre>"},{"location":"robots/rakuda/#_19","title":"\u95a2\u9023\u30af\u30e9\u30b9","text":"<ul> <li><code>RakudaConfig</code> - \u30ed\u30dc\u30c3\u30c8\u8a2d\u5b9a</li> <li><code>RakudaPairSys</code> - \u30a2\u30fc\u30e0\u5354\u8abf\u5236\u5fa1</li> <li><code>RakudaLeader</code> - \u30ea\u30fc\u30c0\u30fc\u30a2\u30fc\u30e0</li> <li><code>RakudaFollower</code> - \u30d5\u30a9\u30ed\u30ef\u30fc\u30a2\u30fc\u30e0</li> </ul>"},{"location":"sensors/cameras/","title":"\u30ab\u30e1\u30e9\u30bb\u30f3\u30b5\u30fc","text":"<p>Robopy\u306f\u8907\u6570\u306e\u30ab\u30e1\u30e9\u30bf\u30a4\u30d7\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u7d71\u4e00\u3055\u308c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u308a\u3001\u7570\u306a\u308b\u30ab\u30e1\u30e9\u3092\u7c21\u5358\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"sensors/cameras/#_2","title":"\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30ab\u30e1\u30e9","text":""},{"location":"sensors/cameras/#intel-realsense","title":"Intel RealSense \u30ab\u30e1\u30e9","text":"<p>\u9ad8\u7cbe\u5ea6\u306aRGB-D\u30ab\u30e1\u30e9\u3067\u3059\u3002\u6df1\u5ea6\u60c5\u5831\u3068\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u540c\u6642\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"sensors/cameras/#_3","title":"\u7279\u5fb4","text":"<ul> <li>RGB + \u6df1\u5ea6: \u30ab\u30e9\u30fc\u753b\u50cf\u3068\u6df1\u5ea6\u753b\u50cf\u306e\u540c\u6642\u53d6\u5f97</li> <li>\u9ad8\u89e3\u50cf\u5ea6: \u6700\u59271920x1080\uff08RGB\uff09</li> <li>\u9ad8\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8: \u6700\u592790fps\uff08\u89e3\u50cf\u5ea6\u306b\u3088\u308b\uff09</li> <li>Linux\u5c02\u7528: \u73fe\u5728\u306fLinux\u74b0\u5883\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8</li> </ul>"},{"location":"sensors/cameras/#_4","title":"\u8a2d\u5b9a\u4f8b","text":"<pre><code>from robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u9ad8\u89e3\u50cf\u5ea6\u8a2d\u5b9a\nconfig = RealsenseCameraConfig(\n    fps=30,\n    width=1280,\n    height=720,\n    color_mode=\"rgb\",\n    depth_mode=\"z16\",\n    enable_depth=True\n)\n\n# \u9ad8\u901f\u8a2d\u5b9a\nfast_config = RealsenseCameraConfig(\n    fps=60,\n    width=640,\n    height=480,\n    color_mode=\"rgb\",\n    enable_depth=False\n)\n</code></pre>"},{"location":"sensors/cameras/#web","title":"Web\u30ab\u30e1\u30e9","text":"<p>\u4e00\u822c\u7684\u306aUSB Web\u30ab\u30e1\u30e9\u3067\u3059\u3002\u30b7\u30f3\u30d7\u30eb\u306a\u753b\u50cf\u53d6\u5f97\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"sensors/cameras/#_5","title":"\u7279\u5fb4","text":"<ul> <li>\u5e83\u3044\u4e92\u63db\u6027: USB UVC\u5bfe\u5fdc\u30ab\u30e1\u30e9</li> <li>\u30b7\u30f3\u30d7\u30eb: RGB\u753b\u50cf\u306e\u307f</li> <li>\u4f4e\u30b3\u30b9\u30c8: \u5b89\u4fa1\u3067\u5165\u624b\u3057\u3084\u3059\u3044</li> <li>\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0: Windows\u3001Linux\u3001macOS\u5bfe\u5fdc</li> </ul>"},{"location":"sensors/cameras/#_6","title":"\u8a2d\u5b9a\u4f8b","text":"<pre><code>from robopy.config.sensor_config.visual_config import WebCameraConfig\n\n# \u6a19\u6e96\u8a2d\u5b9a\nconfig = WebCameraConfig(\n    device_id=0,\n    fps=30,\n    width=640,\n    height=480\n)\n\n# \u9ad8\u89e3\u50cf\u5ea6\u8a2d\u5b9a\nhd_config = WebCameraConfig(\n    device_id=0,\n    fps=15,\n    width=1920,\n    height=1080\n)\n</code></pre>"},{"location":"sensors/cameras/#_7","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"sensors/cameras/#_8","title":"\u30ab\u30e1\u30e9\u306e\u4f5c\u6210\u3068\u63a5\u7d9a","text":"<pre><code>from robopy.sensors.visual.realsense_camera import RealsenseCamera\nfrom robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u8a2d\u5b9a\nconfig = RealsenseCameraConfig(\n    fps=30,\n    width=640,\n    height=480,\n    color_mode=\"rgb\"\n)\n\n# \u30ab\u30e1\u30e9\u306e\u4f5c\u6210\ncamera = RealsenseCamera(\"main\", config)\n\n# \u63a5\u7d9a\ncamera.connect()\n\ntry:\n    # \u753b\u50cf\u53d6\u5f97\n    image = camera.capture()\n    print(f\"\u753b\u50cf\u30b5\u30a4\u30ba: {image.shape}\")\n\n    # \u63a5\u7d9a\u72b6\u614b\u78ba\u8a8d\n    if camera.is_connected:\n        print(\"\u2705 \u30ab\u30e1\u30e9\u306f\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u3059\")\n\nfinally:\n    camera.disconnect()\n</code></pre>"},{"location":"sensors/cameras/#web_1","title":"Web\u30ab\u30e1\u30e9\u306e\u4f7f\u7528","text":"<pre><code>from robopy.sensors.visual.web_camera import WebCamera\nfrom robopy.config.sensor_config.visual_config import WebCameraConfig\n\n# \u8a2d\u5b9a\nconfig = WebCameraConfig(\n    device_id=0,\n    fps=30,\n    width=640,\n    height=480\n)\n\n# \u30ab\u30e1\u30e9\u306e\u4f5c\u6210\u3068\u63a5\u7d9a\ncamera = WebCamera(\"webcam\", config)\ncamera.connect()\n\ntry:\n    # \u753b\u50cf\u53d6\u5f97\n    image = camera.capture()\n    print(f\"\u753b\u50cf\u30b5\u30a4\u30ba: {image.shape}\")\n\nfinally:\n    camera.disconnect()\n</code></pre>"},{"location":"sensors/cameras/#_9","title":"\u30ed\u30dc\u30c3\u30c8\u3068\u306e\u7d71\u5408","text":""},{"location":"sensors/cameras/#rakuda","title":"Rakuda\u30ed\u30dc\u30c3\u30c8\u3067\u306e\u4f7f\u7528","text":"<pre><code>from robopy import RakudaConfig, RakudaSensorParams\nfrom robopy.config.sensor_config import CameraParams\nfrom robopy.config.sensor_config.visual_config import RealsenseCameraConfig\n\n# \u30ab\u30e1\u30e9\u4ed8\u304dRakuda\u8a2d\u5b9a\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=RakudaSensorParams(\n        cameras=[\n            CameraParams(\n                name=\"main\",\n                config=RealsenseCameraConfig(\n                    fps=30,\n                    width=640,\n                    height=480,\n                    color_mode=\"rgb\"\n                )\n            )\n        ],\n        tactile=[]\n    )\n)\n</code></pre>"},{"location":"sensors/cameras/#_10","title":"\u8907\u6570\u30ab\u30e1\u30e9\u306e\u4f7f\u7528","text":"<pre><code># \u8907\u6570\u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\nsensors = RakudaSensorParams(\n    cameras=[\n        CameraParams(\n            name=\"main\",\n            config=RealsenseCameraConfig(\n                fps=30,\n                width=640,\n                height=480,\n                color_mode=\"rgb\"\n            )\n        ),\n        CameraParams(\n            name=\"side\",\n            config=WebCameraConfig(\n                device_id=1,\n                fps=15,\n                width=424,\n                height=240\n            )\n        )\n    ],\n    tactile=[]\n)\n</code></pre>"},{"location":"sensors/cameras/#material-search","title":":material-search: \u30ab\u30e1\u30e9\u306e\u691c\u51fa\u3068\u9078\u629e","text":""},{"location":"sensors/cameras/#realsense","title":"RealSense\u30ab\u30e1\u30e9\u306e\u691c\u51fa","text":"<pre><code>from robopy.sensors.visual.realsense_camera import RealsenseCamera\n\n# \u5229\u7528\u53ef\u80fd\u306a\u30ab\u30e1\u30e9\u3092\u691c\u51fa\ncameras = RealsenseCamera.find_cameras()\n\nfor camera_info in cameras:\n    print(f\"\u30ab\u30e1\u30e9\u540d: {camera_info['name']}\")\n    print(f\"\u30b7\u30ea\u30a2\u30eb\u756a\u53f7: {camera_info['serial']}\")\n    print(f\"\u88fd\u54c1\u30e9\u30a4\u30f3: {camera_info['product_line']}\")\n</code></pre>"},{"location":"sensors/cameras/#web_2","title":"Web\u30ab\u30e1\u30e9\u306e\u30c6\u30b9\u30c8","text":"<pre><code>import cv2\n\ndef test_webcam(device_id=0):\n    \"\"\"Web\u30ab\u30e1\u30e9\u306e\u30c6\u30b9\u30c8\"\"\"\n    cap = cv2.VideoCapture(device_id)\n\n    if not cap.isOpened():\n        print(f\"\u274c \u30ab\u30e1\u30e9 {device_id} \u3092\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\")\n        return False\n\n    # \u30c6\u30b9\u30c8\u753b\u50cf\u306e\u53d6\u5f97\n    ret, frame = cap.read()\n    cap.release()\n\n    if ret:\n        print(f\"\u2705 \u30ab\u30e1\u30e9 {device_id} \u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u307e\u3059\")\n        print(f\"   \u89e3\u50cf\u5ea6: {frame.shape[:2]}\")\n        return True\n    else:\n        print(f\"\u274c \u30ab\u30e1\u30e9 {device_id} \u304b\u3089\u753b\u50cf\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\")\n        return False\n\n# \u8907\u6570\u306e\u30c7\u30d0\u30a4\u30b9ID\u3092\u30c6\u30b9\u30c8\nfor device_id in range(3):\n    test_webcam(device_id)\n</code></pre>"},{"location":"sensors/cameras/#_11","title":"\u8a2d\u5b9a\u306e\u6700\u9069\u5316","text":""},{"location":"sensors/cameras/#_12","title":"\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3068\u89e3\u50cf\u5ea6\u306e\u30d0\u30e9\u30f3\u30b9","text":"<pre><code># \u9ad8\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u512a\u5148\uff08\u4f4e\u89e3\u50cf\u5ea6\uff09\nhigh_fps_config = RealsenseCameraConfig(\n    fps=90,\n    width=424,\n    height=240,\n    color_mode=\"rgb\",\n    enable_depth=False\n)\n\n# \u9ad8\u89e3\u50cf\u5ea6\u512a\u5148\uff08\u4f4e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\uff09\nhigh_res_config = RealsenseCameraConfig(\n    fps=15,\n    width=1920,\n    height=1080,\n    color_mode=\"rgb\",\n    enable_depth=True\n)\n\n# \u30d0\u30e9\u30f3\u30b9\u8a2d\u5b9a\nbalanced_config = RealsenseCameraConfig(\n    fps=30,\n    width=640,\n    height=480,\n    color_mode=\"rgb\",\n    enable_depth=True\n)\n</code></pre>"},{"location":"sensors/cameras/#_13","title":"\u30c7\u30fc\u30bf\u53ce\u96c6\u3067\u306e\u8a2d\u5b9a","text":"<pre><code># \u30c7\u30fc\u30bf\u53ce\u96c6\u5c02\u7528\u8a2d\u5b9a\uff08\u52b9\u7387\u91cd\u8996\uff09\ndata_collection_config = RealsenseCameraConfig(\n    fps=30,\n    width=640,\n    height=480,\n    color_mode=\"rgb\",\n    depth_mode=\"z16\",\n    enable_depth=True\n)\n\n# \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u8868\u793a\u7528\u8a2d\u5b9a\uff08\u5fdc\u7b54\u6027\u91cd\u8996\uff09\nrealtime_config = RealsenseCameraConfig(\n    fps=60,\n    width=424,\n    height=240,\n    color_mode=\"rgb\",\n    enable_depth=False\n)\n</code></pre>"},{"location":"sensors/cameras/#_14","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"sensors/cameras/#realsense_1","title":"RealSense\u30ab\u30e1\u30e9\u304c\u8a8d\u8b58\u3055\u308c\u306a\u3044","text":"<pre><code># udev\u30eb\u30fc\u30eb\u306e\u78ba\u8a8d\nls /etc/udev/rules.d/ | grep realsense\n\n# librealsense2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u78ba\u8a8d\npython -c \"import pyrealsense2 as rs; print('RealSense OK')\"\n</code></pre>"},{"location":"sensors/cameras/#web_3","title":"Web\u30ab\u30e1\u30e9\u304c\u958b\u3051\u306a\u3044","text":"<pre><code># \u5229\u7528\u53ef\u80fd\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u78ba\u8a8d\nimport cv2\n\nfor i in range(5):\n    cap = cv2.VideoCapture(i)\n    if cap.isOpened():\n        print(f\"\u30c7\u30d0\u30a4\u30b9 {i}: \u5229\u7528\u53ef\u80fd\")\n        cap.release()\n    else:\n        print(f\"\u30c7\u30d0\u30a4\u30b9 {i}: \u5229\u7528\u4e0d\u53ef\")\n</code></pre>"},{"location":"sensors/cameras/#_15","title":"\u6a29\u9650\u30a8\u30e9\u30fc","text":"<pre><code># \u30e6\u30fc\u30b6\u30fc\u3092video\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\nsudo usermod -a -G video $USER\n# \u30ed\u30b0\u30a2\u30a6\u30c8\u30fb\u30ed\u30b0\u30a4\u30f3\u304c\u5fc5\u8981\n\n# \u30c7\u30d0\u30a4\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u6a29\u9650\u78ba\u8a8d\nls -la /dev/video*\n</code></pre>"},{"location":"sensors/cameras/#api","title":"\u95a2\u9023API","text":"<ul> <li>RealsenseCamera - RealSense\u30ab\u30e1\u30e9\u30af\u30e9\u30b9</li> <li>WebCamera - Web\u30ab\u30e1\u30e9\u30af\u30e9\u30b9</li> <li>RealsenseCameraConfig - RealSense\u8a2d\u5b9a</li> <li>WebCameraConfig - Web\u30ab\u30e1\u30e9\u8a2d\u5b9a</li> </ul>"},{"location":"sensors/tactile/","title":"\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc","text":"<p>Robopy\u306f\u3001DIGIT\u89e6\u899a\u30bb\u30f3\u30b5\u30fc\u3092\u7d71\u5408\u3057\u305f\u30bf\u30af\u30bf\u30a4\u30eb\u60c5\u5831\u306e\u53d6\u5f97\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"sensors/tactile/#digit","title":"DIGIT \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc","text":"<p>DIGIT\u306f\u3001Meta Reality Labs\uff08\u65e7Facebook Reality Labs\uff09\u304c\u958b\u767a\u3057\u305f\u8996\u899a\u30d9\u30fc\u30b9\u306e\u89e6\u899a\u30bb\u30f3\u30b5\u30fc\u3067\u3059\u3002</p>"},{"location":"sensors/tactile/#_2","title":"\u7279\u5fb4","text":"<ul> <li>\u9ad8\u89e3\u50cf\u5ea6\u89e6\u899a\u753b\u50cf: 240x320\u30d4\u30af\u30bb\u30eb\u306eRGB\u753b\u50cf</li> <li>\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u53d6\u5f97: \u9ad8\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3067\u306e\u9023\u7d9a\u53d6\u5f97</li> <li>\u63a5\u89e6\u691c\u77e5: \u7269\u4f53\u3068\u306e\u63a5\u89e6\u3092\u8996\u899a\u7684\u306b\u691c\u51fa</li> <li>\u5909\u5f62\u691c\u77e5: \u30bb\u30f3\u30b5\u30fc\u8868\u9762\u306e\u5909\u5f62\u3092\u753b\u50cf\u3068\u3057\u3066\u8a18\u9332</li> </ul>"},{"location":"sensors/tactile/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"sensors/tactile/#_4","title":"\u30bb\u30f3\u30b5\u30fc\u306e\u4f5c\u6210\u3068\u63a5\u7d9a","text":"<pre><code>from robopy.sensors.tactile.digit_sensor import DigitSensor\n\n# \u30bb\u30f3\u30b5\u30fc\u306e\u4f5c\u6210\uff08\u30b7\u30ea\u30a2\u30eb\u756a\u53f7\u3092\u6307\u5b9a\uff09\nsensor = DigitSensor(\"left\", \"D20542\")\n\n# \u63a5\u7d9a\nsensor.connect()\n\ntry:\n    # \u30bf\u30af\u30bf\u30a4\u30eb\u753b\u50cf\u306e\u53d6\u5f97\n    tactile_image = sensor.read()\n    print(f\"\u30bf\u30af\u30bf\u30a4\u30eb\u753b\u50cf\u30b5\u30a4\u30ba: {tactile_image.shape}\")\n\n    # \u63a5\u7d9a\u72b6\u614b\u78ba\u8a8d\n    if sensor.is_connected:\n        print(\"\u2705 \u30bb\u30f3\u30b5\u30fc\u306f\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u3059\")\n\nfinally:\n    sensor.disconnect()\n</code></pre>"},{"location":"sensors/tactile/#_5","title":"\u9023\u7d9a\u30c7\u30fc\u30bf\u53d6\u5f97","text":"<pre><code>import time\n\nsensor = DigitSensor(\"right\", \"D20537\")\nsensor.connect()\n\ntry:\n    # 10\u56de\u306e\u9023\u7d9a\u53d6\u5f97\n    for i in range(10):\n        tactile_data = sensor.capture()\n        print(f\"\u30d5\u30ec\u30fc\u30e0 {i}: {tactile_data.shape}\")\n        time.sleep(0.1)  # 100ms\u9593\u9694\n\nfinally:\n    sensor.disconnect()\n</code></pre>"},{"location":"sensors/tactile/#_6","title":"\u30ed\u30dc\u30c3\u30c8\u3068\u306e\u7d71\u5408","text":""},{"location":"sensors/tactile/#rakuda","title":"Rakuda\u30ed\u30dc\u30c3\u30c8\u3067\u306e\u4f7f\u7528","text":"<pre><code>from robopy import RakudaConfig, RakudaSensorParams, TactileParams\n\n# \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u4ed8\u304dRakuda\u8a2d\u5b9a\nconfig = RakudaConfig(\n    leader_port=\"/dev/ttyUSB0\",\n    follower_port=\"/dev/ttyUSB1\",\n    sensors=RakudaSensorParams(\n        cameras=[],\n        tactile=[\n            TactileParams(serial_num=\"D20542\", name=\"left\"),\n            TactileParams(serial_num=\"D20537\", name=\"right\"),\n        ]\n    )\n)\n</code></pre>"},{"location":"sensors/tactile/#_7","title":"\u8907\u6570\u30bb\u30f3\u30b5\u30fc\u306e\u540c\u671f\u53d6\u5f97","text":"<pre><code>from robopy import RakudaRobot\n\nrobot = RakudaRobot(config)\nrobot.connect()\n\ntry:\n    # \u30c7\u30fc\u30bf\u8a18\u9332\uff08\u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u542b\u3080\uff09\n    obs = robot.record_parallel(max_frame=100, fps=20)\n\n    # \u30bf\u30af\u30bf\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n    if obs['sensors']['tactile']:\n        for name, data in obs['sensors']['tactile'].items():\n            print(f\"\u30bf\u30af\u30bf\u30a4\u30eb {name}: {data.shape}\")\n\nfinally:\n    robot.disconnect()\n</code></pre>"},{"location":"sensors/tactile/#_8","title":"\u30c7\u30fc\u30bf\u5f62\u5f0f","text":""},{"location":"sensors/tactile/#_9","title":"\u753b\u50cf\u30c7\u30fc\u30bf","text":"<p>DIGIT\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u53d6\u5f97\u3055\u308c\u308b\u753b\u50cf\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u3059\uff1a</p> <pre><code># \u5358\u4e00\u30d5\u30ec\u30fc\u30e0\ntactile_image = sensor.read()\n# \u5f62\u72b6: (3, 240, 320) - C x H x W\n\n# \u8907\u6570\u30d5\u30ec\u30fc\u30e0\uff08\u8a18\u9332\u30c7\u30fc\u30bf\uff09\nobs = robot.record_parallel(max_frame=100, fps=20)\ntactile_data = obs['sensors']['tactile']['left']\n# \u5f62\u72b6: (100,3,240, 320) - Frames x C x H x W\n</code></pre>"},{"location":"sensors/tactile/#_10","title":"\u8272\u60c5\u5831","text":"<ul> <li>RGB\u5f62\u5f0f: \u5404\u30d4\u30af\u30bb\u30eb\u304c3\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u8d64\u3001\u7dd1\u3001\u9752\uff09</li> <li>\u5024\u7bc4\u56f2: 0-255\u306e8bit\u6574\u6570</li> <li>\u30c7\u30fc\u30bf\u578b: <code>numpy.float32</code></li> </ul>"},{"location":"sensors/tactile/#_11","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":""},{"location":"sensors/tactile/#_12","title":"\u5358\u4e00\u753b\u50cf\u306e\u8868\u793a","text":"<pre><code>import matplotlib.pyplot as plt\n\n# \u30bf\u30af\u30bf\u30a4\u30eb\u753b\u50cf\u306e\u53d6\u5f97\ntactile_image = sensor.read()\n\n# \u8868\u793a\nplt.figure(figsize=(8, 6))\nplt.imshow(tactile_image)\nplt.title(\"DIGIT \u30bf\u30af\u30bf\u30a4\u30eb\u753b\u50cf\")\nplt.axis('off')\nplt.show()\n</code></pre>"},{"location":"sensors/tactile/#_13","title":"\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<pre><code>from robopy.utils.animation_maker import visualize_rakuda_obs\n\n# \u8a18\u9332\u30c7\u30fc\u30bf\u304b\u3089\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u751f\u6210\nobs = robot.record_parallel(max_frame=100, fps=20)\n\n# \u30bf\u30af\u30bf\u30a4\u30eb\u30bb\u30f3\u30b5\u30fc\u3092\u542b\u3080\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u751f\u6210\nvisualize_rakuda_obs(\n    obs=obs,\n    save_dir=\"./tactile_animation\",\n    fps=20\n)\n</code></pre>"},{"location":"sensors/tactile/#_14","title":"\u8a2d\u5b9a\u3068\u30d1\u30e9\u30e1\u30fc\u30bf","text":""},{"location":"sensors/tactile/#_15","title":"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a","text":"<pre><code>from robopy.config.sensor_config import TactileParams\n\n# \u57fa\u672c\u8a2d\u5b9a\nleft_tactile = TactileParams(\n    serial_num=\"D20542\",\n    name=\"left\"\n)\n\nright_tactile = TactileParams(\n    serial_num=\"D20537\",\n    name=\"right\"\n)\n</code></pre>"},{"location":"sensors/tactile/#_16","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"sensors/tactile/#_17","title":"\u30bb\u30f3\u30b5\u30fc\u304c\u8a8d\u8b58\u3055\u308c\u306a\u3044","text":"<pre><code># \u5229\u7528\u53ef\u80fd\u306aDIGIT\u30bb\u30f3\u30b5\u30fc\u306e\u78ba\u8a8d\nfrom digit_interface.digit import Digit\n\n# \u30bb\u30f3\u30b5\u30fc\u4e00\u89a7\u306e\u53d6\u5f97\ndigit_devices = Digit.get_digit_devices()\nprint(f\"\u691c\u51fa\u3055\u308c\u305fDIGIT\u30bb\u30f3\u30b5\u30fc: {digit_devices}\")\n</code></pre>"},{"location":"sensors/tactile/#_18","title":"\u63a5\u7d9a\u30a8\u30e9\u30fc","text":"<pre><code>try:\n    sensor.connect()\nexcept Exception as e:\n    print(f\"\u63a5\u7d9a\u30a8\u30e9\u30fc: {e}\")\n    print(\"\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044:\")\n    print(\"- \u30bb\u30f3\u30b5\u30fc\u306eUSB\u63a5\u7d9a\")\n    print(\"- \u30b7\u30ea\u30a2\u30eb\u756a\u53f7\u306e\u6b63\u78ba\u6027\")\n    print(\"- \u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u306e\u4f7f\u7528\u72b6\u6cc1\")\n</code></pre>"},{"location":"sensors/tactile/#_19","title":"\u30c7\u30fc\u30bf\u53d6\u5f97\u30a8\u30e9\u30fc","text":"<pre><code>try:\n    tactile_data = sensor.capture()\nexcept Exception as e:\n    print(f\"\u30c7\u30fc\u30bf\u53d6\u5f97\u30a8\u30e9\u30fc: {e}\")\n\n    # \u518d\u63a5\u7d9a\u8a66\u884c\n    sensor.disconnect()\n    time.sleep(1)\n    sensor.connect()\n</code></pre>"},{"location":"sensors/tactile/#_20","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u554f\u984c","text":"<pre><code>import time\n\n# \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6e2c\u5b9a\nsensor = DigitSensor(\"test\", \"D20542\")\nsensor.connect()\n\ntry:\n    start_time = time.time()\n    frame_count = 100\n\n    for i in range(frame_count):\n        tactile_data = sensor.capture()\n\n    end_time = time.time()\n    actual_fps = frame_count / (end_time - start_time)\n    print(f\"\u5b9f\u969b\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8: {actual_fps:.1f} fps\")\n\nfinally:\n    sensor.disconnect()\n</code></pre>"},{"location":"sensors/tactile/#api","title":"\u95a2\u9023API","text":"<ul> <li>DigitSensor - DIGIT\u30bb\u30f3\u30b5\u30fc\u30af\u30e9\u30b9</li> <li>TactileParams - \u30bf\u30af\u30bf\u30a4\u30eb\u8a2d\u5b9a</li> <li>RakudaSensorParams - \u7d71\u5408\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a</li> </ul>"},{"location":"utils/animation/","title":"\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"utils/animation/#_2","title":"\u6982\u8981","text":"<p>\u30ed\u30dc\u30c3\u30c8\u306e\u52d5\u4f5c\u3084\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"utils/animation/#_3","title":"\u6a5f\u80fd","text":"<ul> <li>\u30ed\u30dc\u30c3\u30c8\u306e\u52d5\u4f5c\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3</li> <li>\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306e\u6642\u7cfb\u5217\u53ef\u8996\u5316</li> <li>3D\u30e2\u30c7\u30eb\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3</li> </ul>"},{"location":"utils/animation/#_4","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u4eca\u5f8c\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3067\u8ffd\u52a0\u4e88\u5b9a\u3067\u3059\u3002</p>"},{"location":"utils/animation/#_5","title":"\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9","text":"<pre><code># \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\u306e\u30b5\u30f3\u30d7\u30eb\uff08\u958b\u767a\u4e2d\uff09\nfrom robopy.utils import AnimationMaker\n\nanimation = AnimationMaker()\n# \u5b9f\u88c5\u4e88\u5b9a\n</code></pre>"},{"location":"utils/animation/#api","title":"\u95a2\u9023API","text":"<ul> <li>\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3API</li> </ul>"},{"location":"utils/data-handling/","title":"\u30c7\u30fc\u30bf\u51e6\u7406","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Robopy\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"utils/data-handling/#_2","title":"\u6982\u8981","text":"<p>\u53ce\u96c6\u3057\u305f\u30ed\u30dc\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u30fb\u89e3\u6790\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"utils/data-handling/#_3","title":"\u6a5f\u80fd","text":"<ul> <li>\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406</li> <li>\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e\u5909\u63db</li> <li>\u30c7\u30fc\u30bf\u306e\u5727\u7e2e\u30fb\u5c55\u958b</li> <li>\u7d71\u8a08\u51e6\u7406</li> </ul>"},{"location":"utils/data-handling/#_4","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u30c7\u30fc\u30bf\u51e6\u7406\u6a5f\u80fd\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u4eca\u5f8c\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3067\u8ffd\u52a0\u4e88\u5b9a\u3067\u3059\u3002</p>"},{"location":"utils/data-handling/#_5","title":"\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9","text":"<pre><code># \u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb\uff08\u958b\u767a\u4e2d\uff09\nfrom robopy.utils import DataHandler\n\nhandler = DataHandler()\n# \u5b9f\u88c5\u4e88\u5b9a\n</code></pre>"},{"location":"utils/data-handling/#_6","title":"\u95a2\u9023\u6a5f\u80fd","text":"<ul> <li>\u30c7\u30fc\u30bf\u53ce\u96c6</li> <li>\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3</li> </ul>"}]}